* TODO list  (in emacs org syntax)

** Open [0/2]
  - [-] Issues [9/23]
    - [ ] Callbacks in iterations
    - [ ] bstorage probably should depend on interior unknowns, too
    - [ ] Use logging.jl
    - [ ] vmatrix like sparse matrix 
    - [ ] additional geometry parameter in callbacks
    - [ ] triangle
    - [ ] systematic tests
    - [X]  More parameters in flux function: we need h!
    - [X] compatibility check for vector arguments
    - [ ] try/catch vs exit on error -- stays in repl
    - [ ] views vs slices for input of uk, ul etc
    - [ ] improve grid/graph API
      - transparency, ease of implementation
      - flexibility (multiregion stuff etc.)
        Essentially we may to have different cell/edge loops,
        and calls for assemble_node, assemble_edge, assemble_bedge which
        come from these different types of loops.
        Geometry classes might provide iterators which provide the loops.
    - [ ] Julianic API:
          Try to follow https://docs.julialang.org/en/latest/manual/style-guide/ 
          consistent naming style for vectors etc in structs
    - [ ] timings on 2D operator
    - [ ] Faster graphics
    - [X] Documentation
    - [ ] Real julia module, paper (SoftwareX)
    - [X] 2d grid example
    - [X] Workflow from repl
    - [X] time dependent case
    - [X] ionic liquid problem
    - [X] change to column major
    - [X] two variable example
  - [ ] Ideas [0/2]   
    - [ ] interpolatable data types via fieldnames for parameters (as in ddfermi)
    - [ ] solver strategy: Newton from pdelib + embedding. Have an embedding parameter
          in API


