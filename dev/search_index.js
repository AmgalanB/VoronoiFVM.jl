var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"changes/#Changes-1","page":"Changes","title":"Changes","text":"","category":"section"},{"location":"changes/#V0.4,-July-12,-2019-1","page":"Changes","title":"V0.4, July 12, 2019","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Registered with Julia ecosystem\nEnhance Newton solver by embedding, exception handling\nReplace SparseMatrixCSC with ExtendableSparseMatrix\nfixed allocation issues in assembly\nassured that users get allocation stuff right via typed functions in physics structure\nmore julianic API","category":"page"},{"location":"changes/#V0.3,-April-9-2019-1","page":"Changes","title":"V0.3, April 9 2019","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Renamed to  VoronoiFVM\nComplete rewrite of assembly allowing sparse or dense matrix  to store degree of freedom information\nSolution is a nnodes x nspecies sparse or dense matrix\nThe wonderful array interface of Julia still provides slicing etc in oder to access  species without need to write any bulk_solution stuff or whatever when using the sparse variant\nRe-export value() for debugging in physics functions\nTest function handling for flux calculation\nFirst working steps to impedance handling\nAbolished Graph in favor of  Grid, Graph was premature optimization...","category":"page"},{"location":"changes/#V0.2,-Feb-20,-2019-1","page":"Changes","title":"V0.2, Feb 20, 2019","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Changed signature of all callback functions: This also allows to pass user defined arrays etc. to the callback functions. In particular, velocity vectors can be passed this way.\nBesides of flux!(), they now all have node::VoronoiFVM.Node as a second argument.\nflux!() has edge::VoronoiFVM.Edge as a second argument\nthe x argument in source!() is omitted, the same data  are now found in node.coord","category":"page"},{"location":"changes/#","page":"Changes","title":"Changes","text":"New method edgelength(edge::VoronoiFVM.Edge)","category":"page"},{"location":"changes/#V0.1,-Dec.-2018-1","page":"Changes","title":"V0.1, Dec. 2018","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Initial release","category":"page"},{"location":"method/#The-Voronoi-finite-volume-method-1","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"","category":"section"},{"location":"method/#Construction-of-control-volumes-1","page":"The Voronoi finite volume method","title":"Construction of control volumes","text":"","category":"section"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Start with a triangulation of a polygonal domain (intervals in 1D,triangles in 2D, tetrahedra in 3D). Such a triangulation can be generated by e.g. by the mesh generators triangle and TetGen, and - for simple geometries - from tensor products of lower dimensional grids. \nJoin triangle circumcenters by lines rightarrow create Voronoi cells which can serve as control volumes, akin to representative elementary volumes (REV) used to derive conservation laws.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"<center>\n<img src=\"../trivoro.png\" width=\"50%\">\n</center>","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Black + green: triangle nodes\nGray: triangle edges\nBlue: triangle circumcenters\nRed: Boundaries of Voronoi cells","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This construction requires (in 2D) that sums of angles opposite to triangle edges are less than pi and that angles opposite to boudary edges are less than fracpi2. This property is called the \"boundary conforming Delaunay property\". It has different equivalent definitions and analogues in 3D.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"As a consequence, there is a 1:1 incidence between triangulation nodes and Voronoi cells. Moreover, the angle between the interface between two Voronoi cells and the edge between their corresponding nodes is fracpi2.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The idea is now to use these Voronoi cells as REVs aka control volumes aka finite volume cells.","category":"page"},{"location":"method/#The-discretization-approach-1","page":"The Voronoi finite volume method","title":"The discretization approach","text":"","category":"section"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"<center>\n<img src=\"../vor.png\" width=\"50%\">\n</center>","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Given a continuity equation nablacdot vec j=0 in a domain Omega, integrate this over a contol volume omega_k with associated node vec x_k and apply Gauss theorem:","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\n0=int_omega_k nablacdot  vec j  domega \n=int_partialomega_k vec jcdot vec n ds\n=sum_lin N_k int_omega_kcap omega_l vec jcdot vec n ds + int_partialomega_kcap partialOmega vec jcdot vec n ds\napprox sum_lin N_k fracsigma_klh_klg(u_k u_l)+ gamma_k b(u_k)\nendaligned","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Here, N_k is the set of neighbor control volumes, sigma_kl=omega_kcap omega_l, h_kl=vec x_k -vec x_l, gamma_k=partialomega_kcap partialOmega,  where  cdot denotes the measure (length resp. area) of a geometrical entity. In the approximation step, we replaced the normal flux integral over the interface between two control volumes by the measure of this interface multiplied by a function depending on the unknowns associated to the respective nodes divided by the distance between these nodes. The second integral has  benn replaced by a boundary condition on the flux vec jcdot vec n + b(u)=0. We note that by the very construction, the discretization nodes associated to control volumes adjacent to the domain boundary are located at the domain boundary.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The flux function g can be derived from usual finite difference formulas.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"For instance, for the diffusion flux vec j=-Dvecnabla u, we use g(u_k u_l)=D(u_k -u_l).","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"For a convective diffusion flux vec j = -Dvec nabla u + u vec v, one can chose the upwind flux","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"beginaligned\ng(u_k u_l)=D(u_k -u_l) + \nv_klbegincases\nu_k v_kl0\nu_l v_klleq 0\nendcases\nendaligned","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"where v_kl=frach_klsigma_klint_omega_kcap omega_l vec v cdot vec n_kl  ds Fluxes also can depend nonlinearily on u.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This approach easily generalizes to time dependent nonlinear transport-reaction problems with storage terms s(u), reaction terms r(u) and source terms f:","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"partial_t s(u) + nabla cdot vec j + r(u) -f =0","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Semidiscretization in time (for implicit Euler) leads to ","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"fracs(u)-s(u^flat)tau + nabla cdot vec j + r(u) -f =0","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"where tau is the time step size and u^flat is the solution from the old timestep. The approximation  approach then for each control volume gives","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"omega_kfracs(u_k)-s(u_k^flat)tau + sum_lin N_k fracsigma_klh_klg(u_k u_l)+ gamma_k b(u_k) + omega_k (r(u_k)- f(vec x_k))=0","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"If n is the number of discretization nodes, we get a system of n equations with n unknowns which under proper conditions on rgsb has a unique solution.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This approach generalizes to systems of m partial differential equations, which formally can be written in the same way, but assuming that u is an m-vector function of vec xt, and rgbs are m-vector funtions of their arguments.","category":"page"},{"location":"method/#Why-this-method-?-1","page":"The Voronoi finite volume method","title":"Why this method ?","text":"","category":"section"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Independent of space dimension, the method (with properly chosen flux functions) is able to preserve a number of physical quantities if they are present on the continuous level:","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"local and global mass conservation\npositivity of solutions\nmaximum principle: in the absence of source and reaction terms, local extrema of the stationary solution are located at the domain boudaries, never in the interior. For transient problems, local extrema in the interior can only come from the initial value. \nConsistency to thermodynamics: entropy production etc.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Many of these properties are hard to prove for finite element methods, in particular for the convection-diffusion case.","category":"page"},{"location":"method/#Why-not-this-method-?-1","page":"The Voronoi finite volume method","title":"Why not this method ?","text":"","category":"section"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"There are a number of cases where this method needs replaces by something else or at least to be applied with great care:","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Anisotropic diffusion only works with proper mesh alignment \nStrongly varying capacity (in the function s) at domain interfaces lead to inexact breaktrough curves\nSharp moving convection fronts are smeared out too strongly","category":"page"},{"location":"method/#History-and-literature-1","page":"The Voronoi finite volume method","title":"History and literature","text":"","category":"section"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The following list  is work in progress and incomplete, but it references some sources behind the ideas in this package.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"Macneal, R. H. (1953). An asymmetrical finite difference network. Quarterly of Applied Mathematics, 11(3), 295-310.  (pdf via JSTOR). Perhaps this is the earliest mentioning of the method. Note that it  was used on an electrical analog computer. \nGärtner, K., & Kamenski, L. (2019). Why do we need Voronoi cells and Delaunay meshes? arXiv preprint arXiv:1905.01738. A recent overview on the merits of the method. One of the authors belongs to the pioneers of its application in 3D.\nFuhrmann, J., & Langmach, H. (2001). Stability and existence of solutions of time-implicit finite volume schemes for viscous nonlinear conservation laws. Applied Numerical Mathematics, 37(1-2), 201-230. A discussion of the method applied to rather general nonlinear scalar problems.\nSi, H., Gärtner, K., & Fuhrmann, J. (2010). Boundary conforming Delaunay mesh generation. Computational Mathematics and Mathematical Physics, 50(1), 38-53. Definition of the boundary conforming Delaunay property. \nEymard, R., Fuhrmann, J., & Gärtner, K. (2006). A finite volume scheme for nonlinear parabolic equations derived from one-dimensional local Dirichlet problems. Numerische Mathematik, 102(3), 463-495. General concept of the derivation of upwind fluxes for nonlinear problems.\nFarrell, P., Rotundo, N., Doan, D. H., Kantner, M., Fuhrmann, J., & Koprucki, T. (2017). Drift-diffusion models. In Handbook of Optoelectronic Device Modeling and Simulation (pp. 733-772). CRC Press. Overview and introduction to the method applied to semiconductor device simulation. This problem class profits most from the desirable properties of the method.","category":"page"},{"location":"method/#Software-API-and-implementation-1","page":"The Voronoi finite volume method","title":"Software API and implementation","text":"","category":"section"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The entities describing the discrete system can be subdivided into two categories:","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"geometrical data: omega_k gamma_k sigma_kl h_kl together with the connectivity information of the triangles\nphysical data: the number m and the functions sgrbf describing the particular problem.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"This structure allows to describe the problem to be solved by data derived from the discretization grid and by the functions describing the physics, giving rise to a software API.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The solution of the nonlinear systems of equations can be performed by Newton's method combined with various direct and iterative linear solvers.","category":"page"},{"location":"method/#","page":"The Voronoi finite volume method","title":"The Voronoi finite volume method","text":"The generic programming capabilities of Julia allow for an implementation of the method which results in an API which consists in  the implementation of functions sgrbf without the need to write code for their derivatives.","category":"page"},{"location":"grid/#Grid-1","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"grid/#Types-and-Constants-1","page":"Grid","title":"Types and Constants","text":"","category":"section"},{"location":"grid/#","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_grid.jl\",\"vfvm_tools.jl\"]\nOrder = [:type]","category":"page"},{"location":"grid/#VoronoiFVM.AbstractGrid","page":"Grid","title":"VoronoiFVM.AbstractGrid","text":"abstract type AbstractGrid\n\nAbstract type for grid like datastructures VoronoiFVM.Grid and VoronoiFVM.SubGrid.\n\n\n\n\n\n","category":"type"},{"location":"grid/#VoronoiFVM.Grid","page":"Grid","title":"VoronoiFVM.Grid","text":"struct Grid{Tc} <: VoronoiFVM.AbstractGrid\n\nStructure holding grid data. It is parametrised by the type Tc of coordinates.\n\ncoord::Array{Tc,2} where Tc\n2D Array of node coordinates\n\ncellnodes::Array{Int32,2}\n2D Array of node indices per grid cell\n\ncellregions::Array{Int32,1}\nArray of cell region numbers\n\nbfacenodes::ElasticArrays.ElasticArray{Int32,2,1}\n2D Array of node indices per boundary face\n\nbfaceregions::Array{Int32,1}\nArray of boundary face region numbers\n\nnum_cellregions::Array{Int32,1}\nNumber of inner cell regions. Stored in an array in order to keep the struct immutable.\n\nnum_bfaceregions::Array{Int32,1}\nNumber of boundary face  regions. Stored in an array in order to keep the struct immutable.\n\ncelledgenodes::Array{Int32,2}\n2D Array describing local scheme of distributions nodes per cell edge.\n\n\n\n\n\n","category":"type"},{"location":"grid/#VoronoiFVM.Grid-Union{Tuple{Array{Tc,1}}, Tuple{Tc}} where Tc","page":"Grid","title":"VoronoiFVM.Grid","text":"Constructor for 1D grid.\n\nConstruct 1D grid from an array of node cordinates. It creates two boundary regions with index 1 at the left end and index 2 at the right end.\n\nPrimal grid holding unknowns: marked by o, dual grid marking control volumes: marked by |.\n\n o-----o-----o-----o-----o-----o-----o-----o-----o\n |--|-----|-----|-----|-----|-----|-----|-----|--|\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.Grid-Union{Tuple{Tc}, Tuple{Array{Tc,1},Array{Tc,1}}} where Tc","page":"Grid","title":"VoronoiFVM.Grid","text":"Grid(X, Y)\n\n\nConstructor for 2D grid from coordinate arrays.  Boundary region numbers count counterclockwise:\n\nlocation number\nsouth 1\neast 2\nnorth 3\nwest 4\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.SubGrid","page":"Grid","title":"VoronoiFVM.SubGrid","text":"struct SubGrid{Tc} <: VoronoiFVM.AbstractGrid\n\nSubgrid of parent grid (mainly for visualization purposes). Intended to hold support of species which are not defined everywhere.\n\nparent::VoronoiFVM.Grid\nParent Grid\n\nnode_in_parent::Array{Int32,1}\nIncidence between subgrid node numbers and node numbers in parent.\n\ncoord::Array{Tc,2} where Tc\n2D Array of coordinates per grid node\n\ncellnodes::Array{Int32,2}\n2D Array of node numbers per grid cell\n\n\n\n\n\n","category":"type"},{"location":"grid/#","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_grid.jl\",\"vfvm_tools.jl\"]\nOrder = [:constant]","category":"page"},{"location":"grid/#Methods-1","page":"Grid","title":"Methods","text":"","category":"section"},{"location":"grid/#","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_grid.jl\",\"vfvm_tools.jl\"]\nOrder = [:function]","category":"page"},{"location":"grid/#VoronoiFVM.bfacemask!-Tuple{VoronoiFVM.Grid,AbstractArray,AbstractArray,Int64}","page":"Grid","title":"VoronoiFVM.bfacemask!","text":"bfacemask!(grid::VoronoiFVM.Grid, maskmin::AbstractArray, maskmax::AbstractArray, ireg::Int64; tol) -> Int64\n\n\nEdit region numbers of grid  boundary facets  via rectangular mask. Currently, only for 1D grids, inner boundaries can be added.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.cellmask!-Tuple{VoronoiFVM.Grid,AbstractArray,AbstractArray,Int64}","page":"Grid","title":"VoronoiFVM.cellmask!","text":"cellmask!(grid::VoronoiFVM.Grid, maskmin::AbstractArray, maskmax::AbstractArray, ireg::Int64; tol) -> Int64\n\n\nEdit region numbers of grid cells via rectangular mask.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_bfaces-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_bfaces","text":"num_bfaces(grid::VoronoiFVM.Grid) -> Int64\n\n\nNumber of boundary faces in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_cells-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.num_cells","text":"num_cells(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nNumber of cells in grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_nodes-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.num_nodes","text":"num_nodes(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nNumber of nodes in grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.subgrid-Tuple{VoronoiFVM.Grid,AbstractArray}","page":"Grid","title":"VoronoiFVM.subgrid","text":"subgrid(parent::VoronoiFVM.Grid, subregions::AbstractArray; transform, boundary) -> VoronoiFVM.SubGrid{_1} where _1\n\n\nCreate subgrid of list of regions.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.glue-Union{Tuple{Tv}, Tuple{Array{Tv,1},Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.glue","text":"Glue together two vectors a and b resulting in a vector c. They last element  of a shall be equal (up to tol) to the first element of b. The result fulfills length(c)=length(a)+length(b)-1\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.value","page":"Grid","title":"VoronoiFVM.value","text":"Extract value from dual number. Use to debug physics callbacks. Re-exported from ForwardDiff.jl\n\n\n\n\n\n","category":"function"},{"location":"grid/#Base.eltype-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"Base.eltype","text":"eltype(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nReturn element type of grid coordinates.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.bfacefactors!-Union{Tuple{Tv}, Tuple{Grid{Tv},Int64,Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.bfacefactors!","text":"bfacefactors!(grid, icell, nodefac)\n\n\nCalculate node volume  and voronoi surface contributions for boundary face.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.bfacenode-Tuple{VoronoiFVM.Grid,Any,Any}","page":"Grid","title":"VoronoiFVM.bfacenode","text":"bfacenode(grid::VoronoiFVM.Grid, inode::Any, icell::Any) -> Any\n\n\nIndex of boundary face node.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.celledgenode-Tuple{VoronoiFVM.Grid,Any,Any,Any}","page":"Grid","title":"VoronoiFVM.celledgenode","text":"celledgenode(grid::VoronoiFVM.Grid, inode::Any, iedge::Any, icell::Any) -> Any\n\n\nIndex of cell edge node.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.cellfactors!-Union{Tuple{Tv}, Tuple{Grid{Tv},Int64,Array{Tv,1},Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.cellfactors!","text":"cellfactors!(grid, icell, nodefac, edgefac)\n\n\nCalculate node volume  and voronoi surface contributions for cell.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.cellnode-Tuple{VoronoiFVM.AbstractGrid,Any,Any}","page":"Grid","title":"VoronoiFVM.cellnode","text":"cellnode(grid::VoronoiFVM.AbstractGrid, inode::Any, icell::Any) -> Any\n\n\nReturn index of i-th local node in cell icell\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.dim_grid-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.dim_grid","text":"dim_grid(grid::VoronoiFVM.Grid) -> Int64\n\n\nTopological dimension of grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.dim_space-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.dim_space","text":"dim_space(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nSpace dimension of grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.nodecoord-Tuple{VoronoiFVM.AbstractGrid,Any}","page":"Grid","title":"VoronoiFVM.nodecoord","text":"nodecoord(grid::VoronoiFVM.AbstractGrid, inode::Any) -> SubArray\n\n\nReturn view of coordinates of node inode.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_bfaceregions-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_bfaceregions","text":"num_bfaceregions(grid::VoronoiFVM.Grid) -> Int32\n\n\nNumber of boundary face regions in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_cellregions-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_cellregions","text":"num_cellregions(grid::VoronoiFVM.Grid) -> Int32\n\n\nNumber of cell regions in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_edges_per_cell-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_edges_per_cell","text":"num_edges_per_cell(grid::VoronoiFVM.Grid) -> Int64\n\n\nNumber of edges per grid cell.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_nodes_per_bface-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_nodes_per_bface","text":"num_nodes_per_bface(grid::VoronoiFVM.Grid) -> Int64\n\n\nNumber of nodes per boundary face\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_nodes_per_cell-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.num_nodes_per_cell","text":"num_nodes_per_cell(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nReturn number of nodes per cell in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.reg_bface-Tuple{VoronoiFVM.Grid,Any}","page":"Grid","title":"VoronoiFVM.reg_bface","text":"reg_bface(grid::VoronoiFVM.Grid, icell::Any) -> Any\n\n\nBoundary region number for boundary face\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.reg_cell-Tuple{VoronoiFVM.Grid,Any}","page":"Grid","title":"VoronoiFVM.reg_cell","text":"reg_cell(grid::VoronoiFVM.Grid, icell::Any) -> Any\n\n\nBulk region number for cell\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.geomspace-Union{Tuple{Tv}, NTuple{4,Tv}} where Tv","page":"Grid","title":"VoronoiFVM.geomspace","text":"geomspace(a, b, ha, hb; tol)\n\n\n(Try to) create a subdivision of interval (a,b) stored in the  returned array X such that \n\nX[1]==a, X[end]==b\n(X[2]-X[1])<=ha+tol*(b-a)\n(X[end]-X[end-1])<=hb+tol*(b-a)\nThere is a number q such that  X[i+1]-X[i] == q*(X[i]-X[i-1])\nX is the array with the minimal possible number of points with the above property\n\nCaveat: the algorithm behind this is  well tested but unproven.\n\nReturns an Array containing the points of the subdivision.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.tricircumcenter!-Union{Tuple{Tv}, NTuple{4,Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.tricircumcenter!","text":"tricircumcenter!(circumcenter, a, b, c)\n\n\nFind the circumcenter of a triangle.                 \n\nThe result is returned both in terms of x-y coordinates and xi-eta\t  coordinates, relative to the triangle's point a' (that is,a' is\t  the origin of both coordinate systems).\t Hence, the x-y coordinates\t  returned are NOT absolute; one must add the coordinates of `a' to\t  find the absolute coordinates of the circumcircle.  However, this means\t  that the result is frequently more accurate than would be possible if\t  absolute coordinates were returned, due to limited floating-point\t  precision.  In general, the circumradius can be computed much more\t  accurately.\t\t\t\t\t\t\t\t \n\nCreated from C source of Jonathan R Shewchuk <jrs@cs.cmu.edu>\n\nModified to return absolute coordinates.\n\n\n\n\n\n","category":"method"},{"location":"physics/#Physics-1","page":"Physics","title":"Physics","text":"","category":"section"},{"location":"physics/#Types-and-Constants-1","page":"Physics","title":"Types and Constants","text":"","category":"section"},{"location":"physics/#","page":"Physics","title":"Physics","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:type]","category":"page"},{"location":"physics/#VoronoiFVM.AbstractData","page":"Physics","title":"VoronoiFVM.AbstractData","text":"abstract type AbstractData\n\nAbstract type for user data.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractPhysics","page":"Physics","title":"VoronoiFVM.AbstractPhysics","text":"abstract type AbstractPhysics\n\nAbstract type for physics.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics","page":"Physics","title":"VoronoiFVM.Physics","text":"struct Physics{Flux<:Function, Reaction<:Function, Storage<:Function, Source<:Function, BReaction<:Function, BStorage<:Function, D<:VoronoiFVM.AbstractData} <: VoronoiFVM.AbstractPhysics\n\nPhysics data record.\n\nflux::Function\nFlux between neigboring control volumes\n\nstorage::Function\nStorage term (term under time derivative)\n\nreaction::Function\nReaction term\n\nsource::Function\n\" Source term\n\nbreaction::Function\nBoundary reaction term\n\nbstorage::Function\nBoundary storage term\n\ndata::VoronoiFVM.AbstractData\nUser data (parameters)\n\nnum_species::Int8\nNumber of species\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics-Tuple{}","page":"Physics","title":"VoronoiFVM.Physics","text":"Physics(; num_species, data, flux, reaction, storage, source, breaction, bstorage) -> VoronoiFVM.Physics{typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.default_storage),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),VoronoiFVM.NoData}\n\n\nConstructor for physics data with default values.\n\n\n\n\n\n","category":"method"},{"location":"physics/#","page":"Physics","title":"Physics","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:constants]","category":"page"},{"location":"physics/#Methods-1","page":"Physics","title":"Methods","text":"","category":"section"},{"location":"physics/#","page":"Physics","title":"Physics","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:function]","category":"page"},{"location":"physics/#VoronoiFVM.fbernoulli-Tuple{Real}","page":"Physics","title":"VoronoiFVM.fbernoulli","text":"fbernoulli(x::Real) -> Any\n\n\nBernoulli function implementation for exponentially fitted finite volumes.\n\nThe name fbernoulli has been chosen to avoid confusion with Bernoulli from JuliaStats/Distributions.jl\n\nReturns a real number containing the result.\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.fbernoulli_pm-Tuple{Real}","page":"Physics","title":"VoronoiFVM.fbernoulli_pm","text":"fbernoulli_pm(x::Real) -> Tuple{Any,Any}\n\n\nBernoulli function implementation for exponentially fitted finite volumes, joint evaluation for positive and negative argument\n\nUsually, we need B(x), B(-x) togehter,  and it is cheaper to calculate them together.\n\nReturns two real numbers containing the result for argument x and argument -x.\n\n\n\n\n\n","category":"method"},{"location":"system/#System-1","page":"System","title":"System","text":"","category":"section"},{"location":"system/#Types-and-Constants-1","page":"System","title":"Types and Constants","text":"","category":"section"},{"location":"system/#","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_system.jl\",\"vfvm_solver.jl\",\"vfvm_newtoncontrol.jl\", \"vfvm_testfunctions.jl\"]\nOrder = [:type]","category":"page"},{"location":"system/#VoronoiFVM.AbstractSystem","page":"System","title":"VoronoiFVM.AbstractSystem","text":"abstract type AbstractSystem\n\nAbstract type for finite volume system structure\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.BNode","page":"System","title":"VoronoiFVM.BNode","text":"mutable struct BNode{Tv}\n\nStructure holding local boundary  node information.\n\nindex::Int32\nIndex in grid\n\nregion::Int32\nBoundary region number\n\ncoord::Array{Tv,1} where Tv\n1D Array of node coordinates\n\nnspec::Int64\nNumber of species defined in node\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSystem","page":"System","title":"VoronoiFVM.DenseSystem","text":"mutable struct DenseSystem{Tv} <: VoronoiFVM.AbstractSystem{Tv}\n\nStructure holding data for finite volume system solution. Information on species distribution is kept in dense matrices, and the solution array is of type Array{2}.\n\nUnlike in the SparseSystem, the system matrix handles exactly those degrees of freedom which correspond to unknowns, and dummy  degrees of freedom where unknowns are not defined. Handling of the sparse matrix structures for the bookeeping of the unknowns has less overhead, but additional dummy equations are added to the system matrix.\n\ngrid::VoronoiFVM.Grid\nGrid\n\nphysics::VoronoiFVM.Physics\nPhysics data\n\nboundary_values::Array{Tv,2} where Tv\nArray of boundary values\n\nboundary_factors::Array{Tv,2} where Tv\nArray of boundary factors\n\nregion_species::Array{Int8,2}\nFull matrix containing species numbers for inner regions\n\nbregion_species::Array{Int8,2}\nFull matrix containing species numbers for boundary regions\n\nnode_dof::Array{Int8,2}\nFull matrix containing degree of freedom numbers for each node\n\nmatrix::ExtendableSparse.ExtendableSparseMatrix{Tv,Int64} where Tv\nJacobi matrix for nonlinear problem\n\nspecies_homogeneous::Bool\nFlag which says if the number of unknowns per node is constant\n\nupdate::Array{Tv,2} where Tv\nSolution vector holding Newton update\n\nresidual::Array{Tv,2} where Tv\nSolution vector holding Newton residual\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSystem-Tuple{VoronoiFVM.Grid,VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.DenseSystem","text":"DenseSystem(grid::VoronoiFVM.Grid, physics::VoronoiFVM.Physics) -> VoronoiFVM.DenseSystem{_1} where _1\n\n\nConstructor for DenseSystem. physics provides some user data, maxspec is the maximum number of species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.Edge","page":"System","title":"VoronoiFVM.Edge","text":"mutable struct Edge{Tv}\n\nStructure holding local edge information.\n\nindex::Int32\nIndex in grid\n\nnodeK::Int32\nIndex of first node\n\nnodeL::Int32\nIndex of second node\n\nregion::Int32\nInner region number corresponding to edge\n\ncoordK::Array{Tv,1} where Tv\n1D Array of first node coordinates\n\ncoordL::Array{Tv,1} where Tv\n1D Array of second node coordinates\n\nnspec::Int64\nNumber of species defined in edge\n\nicell::Int64\nNumber of discretization cell the edge is invoked from\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.Node","page":"System","title":"VoronoiFVM.Node","text":"mutable struct Node{Tv}\n\nStructure holding local node information.\n\nindex::Int32\nIndex in grid\n\nregion::Int32\nInner region number\n\ncoord::Array{Tv,1} where Tv\n1D Array of node coordinates\n\nnspec::Int64\nNumber of species defined in node\n\nicell::Int64\nNumber of discretization cell the node is invoked from\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSolutionArray","page":"System","title":"VoronoiFVM.SparseSolutionArray","text":"struct SparseSolutionArray{Tv} <: AbstractArray{Tv,2}\n\nStruct holding solution information for SparseSystem. Solution is stored in a sparse matrix structure.\n\nThis class plays well with the abstract array interface.\n\nnode_dof::SparseArrays.SparseMatrixCSC{Tv,Int32} where Tv\nSparse matrix holding actual data.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSystem","page":"System","title":"VoronoiFVM.SparseSystem","text":"mutable struct SparseSystem{Tv} <: VoronoiFVM.AbstractSystem{Tv}\n\nStructure holding data for finite volume system solution. Information on species distribution is kept in sparse matrices, and the solution array is of type SparseSolutionArray, i.e. effectively it is a sparse matrix.\n\nUnlike in the DenseSystem, the system matrix handles exactly those degrees of freedom which correspond to unknowns. However, handling of the sparse matrix structures for the bookeeping of the unknowns creates overhead.\n\ngrid::VoronoiFVM.Grid\nGrid\n\nphysics::VoronoiFVM.Physics\nPhysics data\n\nboundary_values::Array{Tv,2} where Tv\nArray of boundary values\n\nboundary_factors::Array{Tv,2} where Tv\nArray of boundary factors\n\nregion_species::SparseArrays.SparseMatrixCSC{Int8,Int16}\nSparse matrix containing species numbers for inner regions\n\nbregion_species::SparseArrays.SparseMatrixCSC{Int8,Int16}\nSparse matrix containing species numbers for boundary regions\n\nnode_dof::SparseArrays.SparseMatrixCSC{Int8,Int32}\nSparse matrix containing degree of freedom numbers for each node\n\nmatrix::ExtendableSparse.ExtendableSparseMatrix{Tv,Int64} where Tv\nJacobi matrix for nonlinear problem\n\nspecies_homogeneous::Bool\nFlag which says if the number of unknowns per node is constant\n\nupdate::VoronoiFVM.SparseSolutionArray\nSolution vector holding Newton update\n\nresidual::VoronoiFVM.SparseSolutionArray\nSolution vector holding Newton residual\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSystem-Tuple{VoronoiFVM.Grid,VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.SparseSystem","text":"SparseSystem(grid::VoronoiFVM.Grid, physics::VoronoiFVM.Physics) -> VoronoiFVM.SparseSystem{_1} where _1\n\n\nConstructor for SparseSystem. physics provides some user data, maxspec is the maximum number of species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.SubgridArrayView","page":"System","title":"VoronoiFVM.SubgridArrayView","text":"struct SubgridArrayView{Tv, Ta} <: AbstractArray{Tv,2}\n\nStruct holding information for solution array view on subgrid\n\nsysarray::Any\nOriginal array\n\nsubgrid::VoronoiFVM.SubGrid\nSubgrid for view\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.AssemblyError","page":"System","title":"VoronoiFVM.AssemblyError","text":"struct AssemblyError <: Exception\n\nException thrown if error occured during assembly (e.g. domain error)\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.ConvergenceError","page":"System","title":"VoronoiFVM.ConvergenceError","text":"struct ConvergenceError <: Exception\n\nException thrown if Newton's method convergence fails.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.EmbeddingError","page":"System","title":"VoronoiFVM.EmbeddingError","text":"struct EmbeddingError <: Exception\n\nException thrown if embedding fails\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.FactorizationError","page":"System","title":"VoronoiFVM.FactorizationError","text":"struct FactorizationError <: Exception\n\nException thrown if error occured during factorization.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.NewtonControl","page":"System","title":"VoronoiFVM.NewtonControl","text":"mutable struct NewtonControl\n\nControl parameter structure for Newton method.\n\ntol_absolute::Float64\nTolerance (in terms of norm of Newton update)\n\ntol_relative::Float64\nTolerance (relative to the first residual)\n\ntol_round::Float64\nTolerance for roundoff error detection\n\ndamp_initial::Float64\nInitial damping parameter\n\ndamp_growth::Float64\nDamping parameter growth factor\n\nmax_iterations::Int32\nMaximum number of iterations\n\nmax_lureuse::Int32\nMaximum number of reuses of lu factorization\n\nmax_round::Int32\nMaximum number of consecutive iterations within roundoff error tolerance\n\ntol_linear::Float64\nTolerance of iterative linear solver\n\nverbose::Bool\nVerbosity flag\n\nhandle_exceptions::Bool\nHandle exceptions\n\nΔp::Float64\nParameter step for embedding\n\nΔp_max::Float64\nMaximal parameter step\n\nΔp_min::Float64\nMinimal parameter step\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.NewtonControl-Tuple{Any}","page":"System","title":"VoronoiFVM.NewtonControl","text":"NewtonControl(this::Any) -> Any\n\n\nDefault constructor\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.TestFunctionFactory","page":"System","title":"VoronoiFVM.TestFunctionFactory","text":"mutable struct TestFunctionFactory{Tv}\n\nData structure containing DenseSystem used to calculate test functions for boundary flux calculations.\n\nsystem::VoronoiFVM.AbstractSystem{Tv} where Tv\nOriginal system\n\ntfsystem::VoronoiFVM.DenseSystem\nTest function system\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.TestFunctionFactory-Union{Tuple{AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.TestFunctionFactory","text":"TestFunctionFactory(system)\n\n\nConstructor for TestFunctionFactory from System\n\n\n\n\n\n","category":"method"},{"location":"system/#","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_system.jl\",\"vfvm_solver.jl\",\"vfvm_newtoncontrol.jl\", \"vfvm_testfunctions.jl\"]\nOrder = [:constant]","category":"page"},{"location":"system/#VoronoiFVM.Dirichlet","page":"System","title":"VoronoiFVM.Dirichlet","text":"Constant to be used as boundary condition factor  to mark Dirichlet boundary conditons.    \n\n\n\n\n\n","category":"constant"},{"location":"system/#Methods-1","page":"System","title":"Methods","text":"","category":"section"},{"location":"system/#","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_system.jl\",\"vfvm_solver.jl\",\"vfvm_newtoncontrol.jl\", \"vfvm_testfunctions.jl\"]\nOrder = [:function]","category":"page"},{"location":"system/#VoronoiFVM.data-Union{Tuple{AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.data","text":"Retrieve user data record.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.dof-Union{Tuple{Tv}, Tuple{Array{Tv,2},Integer,Integer}} where Tv","page":"System","title":"VoronoiFVM.dof","text":"dof(a::Tv, ispec::Tv, K::Tv)\n\n\nGet number of degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.dof-Union{Tuple{Tv}, Tuple{SparseSolutionArray{Tv},Integer,Integer}} where Tv","page":"System","title":"VoronoiFVM.dof","text":"dof(a::Tv, i::Tv, j::Tv)\n\n\nGet number of degree of freedom. Return 0 if species is not defined in node.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_boundary_species!-Tuple{VoronoiFVM.AbstractSystem,Integer,AbstractArray{T,1} where T}","page":"System","title":"VoronoiFVM.enable_boundary_species!","text":"enable_boundary_species!(this::VoronoiFVM.AbstractSystem, ispec::Integer, regions::AbstractArray{T,1} where T)\n\n\nAdd species to a list of boundary regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_species!-Tuple{VoronoiFVM.AbstractSystem,Integer,AbstractArray{T,1} where T}","page":"System","title":"VoronoiFVM.enable_species!","text":"enable_species!(this::VoronoiFVM.AbstractSystem, ispec::Integer, regions::AbstractArray{T,1} where T)\n\n\nAdd species to a list of bulk regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.getdof-Tuple{VoronoiFVM.SparseSolutionArray,Integer}","page":"System","title":"VoronoiFVM.getdof","text":"getdof(a::VoronoiFVM.SparseSolutionArray, i::Integer) -> Any\n\n\nReturn  value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_nodes-Tuple{AbstractArray}","page":"System","title":"VoronoiFVM.num_nodes","text":"num_nodes(a::AbstractArray) -> Any\n\n\nNumber of nodes (size of second dimension) of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.setdof!-Tuple{VoronoiFVM.SparseSolutionArray,Any,Integer}","page":"System","title":"VoronoiFVM.setdof!","text":"setdof!(a::VoronoiFVM.SparseSolutionArray, v::Any, i::Integer) -> Any\n\n\nSet value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{DenseSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.unknowns","text":"Create a solution vector for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{SparseSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.unknowns","text":"Create a solution vector for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewK-Tuple{Int64,AbstractArray}","page":"System","title":"VoronoiFVM.viewK","text":"viewK(nspec::Int64, u::AbstractArray) -> SubArray\n\n\nSolution view on first edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewK-Union{Tuple{Tv}, Tuple{Edge{Tv},AbstractArray}} where Tv","page":"System","title":"VoronoiFVM.viewK","text":"Solution view on first edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewL-Tuple{Int64,AbstractArray}","page":"System","title":"VoronoiFVM.viewL","text":"viewL(nspec::Int64, u::AbstractArray) -> SubArray\n\n\nSolution view on second edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewL-Union{Tuple{Tv}, Tuple{Edge{Tv},AbstractArray}} where Tv","page":"System","title":"VoronoiFVM.viewL","text":"viewL(edge::Tv, u::Tv)\n\n\nSolution view on second edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.embed!-Union{Tuple{Tv}, Tuple{AbstractArray{Tv,2},AbstractArray{Tv,2},AbstractSystem{Tv}}} where Tv","page":"System","title":"VoronoiFVM.embed!","text":"Solution method for instance of abstract system.\n\nPerform solution via parameter embedding, calling solve! for each value of the parameter p from interval (0,1). The user is responsible for the interpretation of the parameter. The optional pre() callback can be used to communicate its value to the system. The optionalpost() callback method can be used to perform various postprocessing steps.\n\nIf control.handle_error is true, solve!  throws an error, and  stepsize control.Δp is lowered, and solve! is called again with a smaller  parameter value. If control.Δp<control.Δp_min, embed! is aborted with error.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},Function,AbstractArray{Tv,2}}} where Tv","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this::Tv, F::Tv, U::Tv)\n\n\nIntegrate function F of  solution vector over domain.  The result contains the integral for each species separately.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.solve!-Union{Tuple{Tv}, Tuple{AbstractArray{Tv,2},AbstractArray{Tv,2},AbstractSystem{Tv}}} where Tv","page":"System","title":"VoronoiFVM.solve!","text":"solve!(solution::Tv, inival::Tv, this::Tv; control, tstep)\n\n\nSolution method for instance of abstract system.\n\nPerform solution of stationary system (if tstep==Inf) or one tine step of implicit Euler time step system using Newton's method with damping.  Initial damping is chosen according  control.damp_initial.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},Array{Tv,1},AbstractArray{Tv,2},AbstractArray{Tv,2},Real}} where Tv","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this, tf, U, Uold, tstep)\n\n\nCalculate test function integral.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},Array{Tv,1},AbstractArray{Tv,2}}} where Tv","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this, tf, U)\n\n\nCalculate test function integral.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.testfunction-Union{Tuple{Tv}, Tuple{TestFunctionFactory{Tv},Any,Any}} where Tv","page":"System","title":"VoronoiFVM.testfunction","text":"testfunction(factory, bc0, bc1)\n\n\nCreate testfunction which has Dirichlet zero boundary conditions  for boundary regions in bc0 and Dirichlet one boundary conditions  for boundary regions in bc1.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.copy-Union{Tuple{SparseSolutionArray{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"Base.copy","text":"Create a copy of solution array\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.getindex-Tuple{VoronoiFVM.SparseSolutionArray,Integer,Integer}","page":"System","title":"Base.getindex","text":"getindex(a::VoronoiFVM.SparseSolutionArray, ispec::Integer, inode::Integer) -> Any\n\n\nAccessor for solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.getindex-Tuple{VoronoiFVM.SubgridArrayView,Integer,Integer}","page":"System","title":"Base.getindex","text":"getindex(aview::VoronoiFVM.SubgridArrayView, ispec::Integer, inode::Integer) -> Any\n\n\nAccessor method for subgrid array view.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.setindex!-Tuple{VoronoiFVM.SparseSolutionArray,Any,Integer,Integer}","page":"System","title":"Base.setindex!","text":"setindex!(a::VoronoiFVM.SparseSolutionArray, v::Any, ispec::Integer, inode::Integer) -> Union{Nothing, SparseSolutionArray}\n\n\nAccessor for solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.setindex!-Tuple{VoronoiFVM.SubgridArrayView,Any,Integer,Integer}","page":"System","title":"Base.setindex!","text":"setindex!(aview::VoronoiFVM.SubgridArrayView, v::Any, ispec::Integer, inode::Integer) -> VoronoiFVM.SubgridArrayView\n\n\nAccessor method for subgrid array view.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.size-Tuple{VoronoiFVM.SparseSolutionArray}","page":"System","title":"Base.size","text":"size(a::VoronoiFVM.SparseSolutionArray) -> Tuple{Int64,Int64}\n\n\nReturn size of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.size-Tuple{VoronoiFVM.SubgridArrayView}","page":"System","title":"Base.size","text":"size(a::VoronoiFVM.SubgridArrayView) -> Tuple{Any,Int64}\n\n\nReturn size of solution array view.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.view-Union{Tuple{Tv}, Tuple{AbstractArray{Tv,2},SubGrid}} where Tv","page":"System","title":"Base.view","text":"view(a::Tv, sg::Tv) -> SubArray\n\n\nCreate a view of the solution array on a subgrid.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.edgelength-Union{Tuple{Edge{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.edgelength","text":"Calculate the length of an edge. \n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.is_boundary_species-Tuple{VoronoiFVM.AbstractSystem,Integer}","page":"System","title":"VoronoiFVM.is_boundary_species","text":"is_boundary_species(this::VoronoiFVM.AbstractSystem, ispec::Integer) -> Bool\n\n\nCheck if species number corresponds to boundary species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.is_bulk_species-Tuple{VoronoiFVM.AbstractSystem,Integer}","page":"System","title":"VoronoiFVM.is_bulk_species","text":"is_bulk_species(this::VoronoiFVM.AbstractSystem, ispec::Integer) -> Bool\n\n\nCheck if species number corresponds bulk species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.isdof-Tuple{VoronoiFVM.AbstractSystem,Any,Any}","page":"System","title":"VoronoiFVM.isdof","text":"isdof(this::VoronoiFVM.AbstractSystem, ispec::Any, inode::Any) -> Bool\n\n\nCheck if degree of freedom is defined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_dof-Tuple{VoronoiFVM.DenseSystem}","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(this::VoronoiFVM.DenseSystem) -> Int64\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_dof-Tuple{VoronoiFVM.SparseSystem}","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(this::VoronoiFVM.SparseSystem) -> Int64\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Tuple{Any}","page":"System","title":"VoronoiFVM.num_species","text":"num_species(a::Any) -> Any\n\n\nNumber of species (size of first dimension) of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Union{Tuple{AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.num_species","text":"Number of species in system\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Union{Tuple{Edge{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.num_species","text":"Return number of species for edge\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.values-Tuple{Array}","page":"System","title":"VoronoiFVM.values","text":"values(a::Array) -> Any\n\n\nArray of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.values-Tuple{VoronoiFVM.SparseSolutionArray}","page":"System","title":"VoronoiFVM.values","text":"values(a::VoronoiFVM.SparseSolutionArray) -> Array{Tv,1} where Tv\n\n\nArray of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.eval_and_assemble-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},AbstractArray{Tv,2},AbstractArray{Tv,2},AbstractArray{Tv,2},Tv}} where Tv","page":"System","title":"VoronoiFVM.eval_and_assemble","text":"eval_and_assemble(system::Tv, U::Tv, UOld::Tv, F::Tv, tstep::Tv)\n\n\nWrapper for main assembly method.\n\nEvaluate solution with result in right hand side F and  assemble matrix into system.matrix.\n\n\n\n\n\n","category":"method"},{"location":"allindex/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"allindex/#Types-and-Constructors-1","page":"Index","title":"Types and Constructors","text":"","category":"section"},{"location":"allindex/#","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:type]","category":"page"},{"location":"allindex/#Constants-1","page":"Index","title":"Constants","text":"","category":"section"},{"location":"allindex/#","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:constant]","category":"page"},{"location":"allindex/#Methods-1","page":"Index","title":"Methods","text":"","category":"section"},{"location":"allindex/#","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:function]","category":"page"},{"location":"examples/Example101_Laplace1D/#:-1D-Laplace-equation-1","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"","category":"section"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Let Omega=(gamma_1gamma_2) with gamma_1=0, gamma_2=1. This is the simplest boundary value problem (BVP) for a partial differential equation  (PDE):","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"-Delta u =0\nu(gamma_1)=g_1\nu(gamma_2)=g_2","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"We replace the Dirichlet boundary condition by a Robin boundary condition with a penalty parameter frac1varepsilon:","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"nabla u(gamma_1) + frac1varepsilon(u(gamma_1)-g_1)=0  \n-nabla u(gamma_2) + frac1varepsilon(u(gamma_2)-g_2)\n=0","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"This penalty method for the implementation of Dirichlet boundary conditions is used throughout VoronoiFVM.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"In order to discretize it, we choose collocation points gamma_1=x_1  x_2  dots  x_n=gamma_2.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"For instance, we can choose 6 collocation points in (01): From these, we create a discretization grid structure for working with the method.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"This implicitely creates a number of control volumes omega_k  around each discretization point x_k: Let sigma_kk+1=fracx_k+x_k+12. Then omega_1=(gamma_1sigma_12), omega_k= (sigma_k-1k sigma_kk+1) for k=2dots n-1, omega_n=(sigma_n-1ngamma_2).","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":" x1    x2    x3    x4    x5    x6\n o-----o-----o-----o-----o-----o\n |--|-----|-----|-----|-----|--|\n  ω1  ω2     ω3    ω4    ω5  ω6","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"For each omega_k, we integrate the equation","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"beginaligned\n0=int_omega_k -Delta u domega=  -int_partial omega_k nabla u ds\n= begincases\nu(sigma_12) - u(0) k=1\nu(sigma_kk+1) - u(sigma_k-1k)  1kn\nu(1)- u(sigma_nn+1)k=n\nendcases\napprox begincases\nfrac1x_2-x_1 g(u_1u_2) + frac1varepsilon(u_1-0) k=1\nfrac1x_k-x_k-1g(u_ku_k-1) -frac1x_k+1-x_kg(u_k+1u_k)  1kn\nfrac1varepsilon(u_n-1)+ frac1x_n-x_n-1 g(u_nu_n-1)k=n\nendcases\nendaligned","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"In the last equation, we wrote u_k=u(x_k) and g(u_ku_l)=u_k-u_l. For the interior interfaces between control volumes, we replaced u by a difference quotient. In the boundary control volumes, we replaced u  by the boundary conditions.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"In the example below, we fix a number of species and  write a Julia function describing g, we create a physics record, and a finite volume system with one unknown species and a dense matrix to describe it's degrees of freedom (the matrix used  to calculate the solution is sparse). We give the species the number 1 and enable it for grid region number one 1. Then, we set boundary conditions for species 1 at gamma_1 gamma_2.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"We create a zero initial value and a solution vector and initialize them.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"With these data, we solve the system.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"We wrap this example and all later ones into a module structure. This allows to load all of them at once into the REPL without name clashes. We shouldn't forget the corresponding end statement.","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"module Example101_Laplace1D\n\nusing VoronoiFVM","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Flux function which describes the flux between neigboring control volumes omega_k and omega_l","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"function g!(f,u,edge,data)\n    uk=viewK(edge,u)\n    ul=viewL(edge,u)\n    f[1]=uk[1]-ul[1]\nend\n\n\nfunction main()\n\n    nspecies=1\n    ispec=1","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Create a one dimensional discretization object","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    X=collect(0:0.2:1)\n    grid=VoronoiFVM.Grid(X)","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Create a physics structure","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    physics=VoronoiFVM.Physics(num_species=nspecies,flux=g!)","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Create a finite volume system with dense storage of unknowns","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    sys=VoronoiFVM.DenseSystem(grid,physics)","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Enable species 1 in region 1","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    enable_species!(sys,ispec,[1])","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Set boundary conditions Dirichlet boundary conditions are marked by setting a corresponding value of the boundary factor","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    sys.boundary_factors[ispec,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[ispec,2]=VoronoiFVM.Dirichlet\n    sys.boundary_values[ispec,1]=0\n    sys.boundary_values[ispec,2]=1","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Create & initialize array for solution and initial value","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    inival=unknowns(sys)\n    solution=unknowns(sys)\n    inival.=0\n    solution.=0","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Solve stationary problem","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    solve!(solution,inival,sys)","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Return test value","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"    return solution[3]\nend","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"Called by unit test","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"function test()\n    main() ≈ 0.4\nend\n\nend","category":"page"},{"location":"examples/Example101_Laplace1D/#","page":"101: 1D Laplace equation","title":"101: 1D Laplace equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#:-1D-Nonlinear-Poisson-equation-1","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"Solve the nonlinear Poisson equation","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"-nabla varepsilon nabla u + e^u-e^-u = f","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"in Omega=(01) with boundary condition u(0)=0 and u(1)=1 with","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"f(x)=\n    begincases\n    1x05\n    -1 x05\n    endcases","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"This stationary problem is an example of a nonlinear Poisson equation or Poisson-Boltzmann equation. Such equation occur e.g. in simulations of electrochemical systems and semicondutor devices.","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"Start the module","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"module Example105_NonlinearPoisson1D","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"This gives us he @printf macro (c-like output)","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"using Printf","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"That's the thing we want to do","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"using VoronoiFVM","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"Allow plotting","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"if isinteractive()\n    using Plots\nend","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"Main function for user interaction from REPL and for testing. Default physics need to generate correct test value.","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"function main(;n=10,doplot=false,verbose=false, dense=false)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n)\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n    # A parameter which is \"passed\" to the flux function via scope\n    ϵ=1.0e-3\n\n\n    # Flux function which describes the flux\n    # between neigboring control volumes\n    function flux!(f,u,edge,data)\n        uk=viewK(edge,u)\n        ul=viewL(edge,u)\n        f[1]=ϵ*(uk[1]-ul[1])\n    end\n\n    # Source term\n    function source!(f,node,data)\n        if node.coord[1]<=0.5\n            f[1]=1\n        else\n            f[1]=-1\n        end\n    end\n\n    # Reaction term\n    function reaction!(f,u,node,data)\n        f[1]=exp(u[1]) - exp(-u[1])\n    end\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(\n        flux=flux!,\n        source=source!,\n        reaction=reaction!)\n\n\n    # Create a finite volume system - either\n    # in the dense or  the sparse version.\n    # The difference is in the way the solution object\n    # is stored - as dense or as sparse matrix\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n    # Set boundary conditions\n    sys.boundary_values[1,1]=0.0\n    sys.boundary_values[1,2]=1.0\n    sys.boundary_factors[1,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[1,2]=VoronoiFVM.Dirichlet\n\n    # Create a solution array\n    inival=unknowns(sys)\n    solution=unknowns(sys)\n\n    # Broadcast the initial value\n    inival.=0.5\n\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n\n    # Stationary solution of the problem\n    solve!(solution,inival,sys, control=control)\n\n    if doplot\n        Plots.plot(grid.coord[1,:],solution[1,:],\n                   label=\"\",\n                   title=\"Nonlinear Poisson\",\n                   grid=true,show=true)\n    end\n\n    return sum(solution)\nend\n\n\nfunction test()\n    testval=1.5247901344230088\n    main(dense=false) ≈ testval && main(dense=true) ≈ testval\nend","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"End of module","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"end","category":"page"},{"location":"examples/Example105_NonlinearPoisson1D/#","page":"105: 1D Nonlinear Poisson equation","title":"105: 1D Nonlinear Poisson equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#:-1D-Nonlinear-Diffusion-equation-1","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"","category":"section"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"Solve the nonlinear diffusion equation","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"partial_t u -Delta u^m = 0","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"in Omega=-11) with boundary condition u(0)=0 and u(1)=0 with","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"f(x)=\n    begincases\n    0x01\n    -1 x01\n    endcases","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"using the implicit Euler method.","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"This equation is also called  \"porous medium equation\". The Barenblatt solution is an exact solution of this problem which for m>1 has a finite support.","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"(see Barenblatt, G. I. \"On nonsteady motions of gas and fluid in porous medium.\" Appl. Math. and Mech.(PMM) 16.1 (1952): 67-78.)","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"module Example106_NonlinearDiffusion1D\nusing Printf\nusing VoronoiFVM\nif isinteractive()\n    using Plots\nend\n\n\nfunction barenblatt(x,t,m)\n    tx=t^(-1.0/(m+1.0))\n    xx=x*tx\n    xx=xx*xx\n    xx=1- xx*(m-1)/(2.0*m*(m+1));\n    if xx<0.0\n        xx=0.0\n    end\n    return tx*xx^(1.0/(m-1.0))\nend\n\n\nfunction main(;n=20,m=2,doplot=false,verbose=false, dense=false,tend=0.01,tstep=0.0001)\n\n    # Create a one-dimensional discretization\n    h=1.0/convert(Float64,n/2)\n    X=collect(-1:h:1)\n    grid=VoronoiFVM.Grid(X)\n\n    # Flux function which describes the flux\n    # between neigboring control volumes\n    function flux!(f,u,edge,data)\n        uk=viewK(edge,u)\n        ul=viewL(edge,u)\n        f[1]=uk[1]^m-ul[1]^m\n    end\n\n    # Storage term\n    function storage!(f,u,node,data)\n        f[1]=u[1]\n    end\n\n    # Create a physics structure\n    physics=VoronoiFVM.Physics(\n        flux=flux!,\n        storage=storage!)\n\n\n    # Create a finite volume system - either\n    # in the dense or  the sparse version.\n    # The difference is in the way the solution object\n    # is stored - as dense or as sparse matrix\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    # Add species 1 to region 1\n    enable_species!(sys,1,[1])\n\n    # Set boundary conditions\n    sys.boundary_values[1,1]=0.0\n    sys.boundary_values[1,2]=0.0\n    sys.boundary_factors[1,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[1,2]=VoronoiFVM.Dirichlet\n\n    # Create a solution array\n    inival=unknowns(sys)\n    solution=unknowns(sys)\n    t0=0.001\n    # Broadcast the initial value\n    inival[1,:].=map(x->barenblatt(x,t0,m),X)\n\n\n    # Create solver control info\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    time=t0\n    while time<tend\n        time=time+tstep\n        solve!(solution,inival,sys,control=control,tstep=tstep)\n        inival.=solution\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        if doplot\n            p=Plots.plot(X,\n                         solution[1,:],\n                         label=\"numerical\",\n                         title=@sprintf(\"Nonlinear Diffusion t=%.5f\",time),\n                         grid=true)\n            Plots.plot!(p,X,\n                        map(x->barenblatt(x,time,m),X),\n                        label=\"exact\",\n                        show=true)\n        end\n    end\n    return sum(solution)\nend\n\n\nfunction test()\n    testval=46.66666666647518\n    main(dense=false) ≈ testval && main(dense=true) ≈ testval\nend","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"End of module","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"end","category":"page"},{"location":"examples/Example106_NonlinearDiffusion1D/#","page":"106: 1D Nonlinear Diffusion equation","title":"106: 1D Nonlinear Diffusion equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#:-1D-Nonlinear-Poisson-equation-with-two-species-1","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"","category":"section"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"Solve the nonlinear Poisson equation","category":"page"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"-nabla (001+2u_2)nabla u_1 + u_1u_2= 00001(001+x)","category":"page"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"-nabla (001+2u_1)nabla u_2 -+ u_1u_2 = 00001(101-x)","category":"page"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"in Omega=(01) with boundary condition u_1(0)=1, u_2(0)=0 and u_1(1)=1, u_2(1)=1.","category":"page"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"module Example110_NonlinearPoisson1D_TwoSpecies\n\nusing Printf\nusing VoronoiFVM\n\n\n\nif isinteractive()\n    using Plots\nend\n\n\n\nfunction main(;n=100,doplot=false,verbose=false,dense=false)\n    h=1/n\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n\n    eps=[1.0,1.0]\n\n    physics=VoronoiFVM.Physics(num_species=2,\n\n                               reaction=function(f,u,node,data)\n                               f[1]=u[1]*u[2]\n                               f[2]=-u[1]*u[2]\n                               end,\n\n                               flux=function(f,u,edge,data)\n                               nspecies=2\n                               uk=viewK(2,u)\n                               ul=viewL(2,u)\n                               f[1]=eps[1]*(uk[1]-ul[1])*(0.01+uk[2]+ul[2])\n                               f[2]=eps[2]*(uk[2]-ul[2])*(0.01+uk[1]+ul[1])\n                               end,\n\n                               source=function(f,node,data)\n                               f[1]=1.0e-4*(0.01+node.coord[1])\n                               f[2]=1.0e-4*(0.01+1.0-node.coord[1])\n                               end,\n\n                               storage=function(f,u,node,data)\n                               f[1]=u[1]\n                               f[2]=u[2]\n                               end\n                               )\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    sys.boundary_values[1,1]=1.0\n    sys.boundary_values[1,2]=0.0\n\n    sys.boundary_factors[1,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[1,2]=VoronoiFVM.Dirichlet\n\n    sys.boundary_values[2,1]=1.0\n    sys.boundary_values[2,2]=0.0\n\n    sys.boundary_factors[2,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[2,2]=VoronoiFVM.Dirichlet\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.damp_initial=0.1\n    u5=0\n    for xeps in [1.0,0.5,0.25,0.1,0.05,0.025,0.01]\n        eps=[xeps,xeps]\n        solve!(U,inival,sys,control=control)\n        inival.=U\n        if doplot\n            p=Plots.plot(grid.coord[1,:],U[1,:], grid=true)\n            Plots.plot!(p,grid.coord[1,:],U[2,:],show=true, title=@sprintf(\"\\$\\\\varepsilon=%8.3f\\$\",xeps)),\n            Plots.sleep(0.2)\n        end\n        u5=U[5]\n    end\n    return u5\nend\n\nfunction test()\n    main(dense=false) ≈ 0.7117546972922056 &&\n        main(dense=true) ≈ 0.7117546972922056\nend\nend","category":"page"},{"location":"examples/Example110_NonlinearPoisson1D_TwoSpecies/#","page":"110: 1D Nonlinear Poisson equation with two species","title":"110: 1D Nonlinear Poisson equation with two species","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example115_NonlinearPoisson1D_BoundarySpecies/#","page":"-","title":"-","text":"115: 1D two species system with boundary reaction and boundary species","category":"page"},{"location":"examples/Example115_NonlinearPoisson1D_BoundarySpecies/#","page":"-","title":"-","text":"module Example115_NonlinearPoisson1D_BoundarySpecies\n\nusing Printf\nusing VoronoiFVM\nconst Node=VoronoiFVM.Node\nconst Edge=VoronoiFVM.Edge\n\nif isinteractive()\n    using Plots\nend\n\n\n\nfunction main(;n=10,doplot=false,verbose=false,tend=1, dense=false)\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    N=length(X)\n\n    grid=VoronoiFVM.Grid(X)\n\n\n    eps=21\n    k=1\n\n    physics=VoronoiFVM.Physics(\n        num_species=3,\n        breaction=function(f,u,node,data)\n        if  node.region==2\n        f[1]=k*(u[1]-u[3])\n        f[2]=k*(u[2]-u[3])\n        f[3]=k*(u[3]-u[1])+ k*(u[3]-u[2])\n        end\n        end,\n\n        bstorage=function(f,u,node,data)\n        if  node.region==2\n        f[3]=u[3]\n        end\n        end,\n\n        flux=function(f,u,edge,data)\n        uk=viewK(edge,u)\n        ul=viewL(edge,u)\n        f[1]=eps*(uk[1]-ul[1])\n        f[2]=eps*(uk[2]-ul[2])\n        end ,\n\n        source=function(f,node,data)\n        x1=node.coord[1]-0.5\n        f[1]=exp(-20*x1^2)\n        end,\n\n        storage=function(f,u,node,data)\n        f[1]=u[1]\n        f[2]=u[2]\n        end\n    )\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n    enable_boundary_species!(sys,3,[2])\n\n    inival=unknowns(sys)\n    inival.=0.0\n    U=unknowns(sys)\n\n    eps=1.0e-2\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.tol_relative=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    T=zeros(0)\n    Ub=zeros(0)\n    u5=0\n    while time<tend\n        time=time+tstep\n        solve!(U,inival,sys, control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        tstep*=1.0\n        istep=istep+1\n        u5=U[1,3]\n\n        append!(T,time)\n        append!(Ub,U[3,N])\n\n        if doplot\n            p1=Plots.plot(grid.coord[1,:],U[1,:], grid=true, label=\"spec1\")\n            Plots.plot!(p1,grid.coord[1,:],U[2,:], label=\"spec2\",title=@sprintf(\"max1=%.5f max2=%.5f maxb=%.5f\\n\",maximum(U[1,:]),maximum(U[2,:]),U[3,N]))\n            p2=Plots.plot(T,Ub,ylabel=\"U_b\",xlabel=\"t\")\n            p=Plots.plot(p1,p2,layout=(2,1),legend=false)\n            gui(p)\n        end\n    end\n    return u5\nend\n\nfunction test()\n    main(dense=false) ≈ 0.22631106953924143 &&\n        main(dense=true) ≈ 0.22631106953924143\nend\nend","category":"page"},{"location":"examples/Example115_NonlinearPoisson1D_BoundarySpecies/#","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example120_ThreeRegions1D/#:-Differing-species-sets-in-regions,-1D-1","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"","category":"section"},{"location":"examples/Example120_ThreeRegions1D/#","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"module Example120_ThreeRegions1D\n\nusing Printf\nusing VoronoiFVM\n\nif isinteractive()\n    using Plots\nend\n\n\n\n\nfunction main(;n=30,doplot=false,verbose=false,dense=false)\n    h=3.0/(n-1)\n    X=collect(0:h:3.0)\n    grid=VoronoiFVM.Grid(X)\n    cellmask!(grid,[0.0],[1.0],1)\n    cellmask!(grid,[1.0],[2.1],2)\n    cellmask!(grid,[1.9],[3.0],3)\n\n    subgrid1=subgrid(grid,[1])\n    subgrid2=subgrid(grid,[1,2,3])\n    subgrid3=subgrid(grid,[3])\n\n    if doplot\n        p=Plots.plot()\n        fvmplot!(p,grid)\n        gui(p)\n        readline()\n    end\n\n    eps=[1,1,1]\n    k=[1,1,1]\n\n    physics=VoronoiFVM.Physics(\n    num_species=3,\n    reaction=function(f,u,node,data)\n        if node.region==1\n            f[1]=k[1]*u[1]\n            f[2]=-k[1]*u[1]\n        elseif node.region==3\n            f[2]=k[3]*u[2]\n            f[3]=-k[3]*u[2]\n        else\n            f[1]=0\n        end\n    end,\n\n    flux=function(f,u,edge,data)\n        uk=viewK(edge,u)\n        ul=viewL(edge,u)\n        if edge.region==1\n            f[1]=eps[1]*(uk[1]-ul[1])\n            f[2]=eps[2]*(uk[2]-ul[2])\n        elseif edge.region==2\n            f[2]=eps[2]*(uk[2]-ul[2])\n        elseif edge.region==3\n            f[2]=eps[2]*(uk[2]-ul[2])\n            f[3]=eps[3]*(uk[3]-ul[3])\n        end\n    end,\n\n    source=function(f,node,data)\n        if node.region==1\n            f[1]=1.0e-4*(3.0-node.coord[1])\n        end\n    end,\n\n    storage=function(f,u,node,data)\n        f.=u\n    end\n    )\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1,2,3])\n    enable_species!(sys,3,[3])\n\n    sys.boundary_factors[3,2]=VoronoiFVM.Dirichlet\n    sys.boundary_values[3,2]=0\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    tstep=0.01\n    time=0.0\n    istep=0\n    tend=10\n    testval=0\n    while time<tend\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        tstep*=1.0\n        istep=istep+1\n        testval=U[2,15]\n        if doplot\n            p=Plots.plot()\n            fvmplot!(p,subgrid1, U[1,:],label=\"spec1\", color=(0.5,0,0))\n            fvmplot!(p,subgrid2, U[2,:],label=\"spec2\", color=(0.0,0.5,0))\n            fvmplot!(p,subgrid3, U[3,:],label=\"spec3\", color=(0.0,0.0,0.5))\n            gui(p)\n        end\n    end\n    return testval\nend\n\nfunction test()\n    main(dense=false) ≈ 0.00039500514567080265 &&\n        main(dense=true) ≈ 0.00039500514567080265\nend\n\nend","category":"page"},{"location":"examples/Example120_ThreeRegions1D/#","page":"120: Differing species sets in regions, 1D","title":"120: Differing species sets in regions, 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example125_TestFunctions1D/#:-Terminal-flux-calculation-via-test-functions-1","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"","category":"section"},{"location":"examples/Example125_TestFunctions1D/#","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"module Example125_TestFunctions1D\nusing Printf\nusing VoronoiFVM\n\n\n\nif isinteractive()\n    using Plots\nend\n\nfunction main(;n=100,doplot=false,verbose=false,dense=false)\n    h=1/n\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n\n    eps=[1,1.0e-1]\n\n    physics=VoronoiFVM.Physics(\n         num_species=2,\n    reaction=function(f,u,node,data)\n        f[1]=10*(u[1]-u[2])\n        f[2]=10*(u[2]-u[1])\n    end,\n\n    flux=function(f,u,edge,data)\n        uk=viewK(edge,u)\n        ul=viewL(edge,u)\n        f[1]=eps[1]*(uk[1]-ul[1])\n        f[2]=eps[2]*(uk[2]-ul[2])\n    end,\n\n\n    storage=function(f,u,node,data)\n        f[1]=u[1]\n        f[2]=u[2]\n    end\n    )\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    sys.boundary_values[1,1]=0.01\n    sys.boundary_values[1,2]=0.0\n\n    sys.boundary_factors[1,1]=0\n    sys.boundary_factors[1,2]=0\n\n    sys.boundary_values[2,1]=0.0\n    sys.boundary_values[2,2]=0.0\n\n    sys.boundary_factors[2,1]=0\n    sys.boundary_factors[2,2]=VoronoiFVM.Dirichlet\n\n    factory=VoronoiFVM.TestFunctionFactory(sys)\n    tf1=testfunction(factory,[2],[1])\n    tf2=testfunction(factory,[1],[2])\n\n    if doplot\n        p=plot(grid.coord[1,:],tf1)\n        gui(p)\n        readline()\n        p=plot(grid.coord[1,:],tf2)\n        gui(p)\n        readline()\n    end\n\n    U=unknowns(sys)\n    inival=unknowns(sys)\n    inival[2,:].=0.1\n    inival[1,:].=0.1\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.damp_initial=0.1\n    I1=0\n    for xeps in [1.0,0.1,0.01]\n        eps=[xeps,xeps]\n        solve!(U,inival,sys,control=control)\n        I1=integrate(sys,tf1,U)\n\n        inival.=U\n        if doplot\n            p=plot()\n            plot!(p,grid.coord[1,:],U[1,:])\n            plot!(p,grid.coord[1,:],U[2,:])\n            gui(p)\n        end\n        u5=U[5]\n    end\n    return I1[1]\nend\n\nfunction test()\n    main(dense=false) ≈ 0.01 &&\n        main(dense=true) ≈ 0.01\nend\nend","category":"page"},{"location":"examples/Example125_TestFunctions1D/#","page":"125: Terminal flux calculation via test functions","title":"125: Terminal flux calculation via test functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example150_Impedance1D/#:-Impedance-calculation-1","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"","category":"section"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Impedance calculation for","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"C ut - (D ux)_x + Ru = 0   in (0,1)      u(0,t)=1 + exp(iωt)      u(1,t)=0","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Measurement: I(t)= D u_x(1,t)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Steady state:","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"(D u0x)x + Ru0 = 0","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"u0(0,t)=1    u0(1,t)=0","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Small signal ansatz for ω","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"u(x,t)= u0(x)+ ua(x) exp(iωt)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"iωC ua - (D uax)x + R u_a =0      ua(0)=1      ua(1)=0","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"module Example150_Impedance1D\n\nusing Printf\nusing VoronoiFVM\n\nif isinteractive()\n    using Plots\nend","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Structure containing  userdata information","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"mutable struct Data  <: VoronoiFVM.AbstractData\n    D::Real\n    C::Real\n    R::Real\n    Data()=new()\nend\n\n\nfunction main(;nref=0,doplot=false,verbose=false)\n    L=1.0","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create array which is refined close to 0","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    h0=0.1/2.0^nref\n    h1=0.5/2.0^nref\n    X=VoronoiFVM.geomspace(0.0,L,h0,h1)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create discretitzation grid","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    grid=VoronoiFVM.Grid(X)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create and fill data","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    data=Data()\n    data.R=1\n    data.D=1\n    data.C=2","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Declare constitutive functions","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    flux=function(f,u,edge,data)\n        f[1]=data.D*(u[1]-u[2])\n    end\n\n    storage=function(f,u,node,data)\n        f[1]=data.C*u[1]\n    end\n\n    reaction=function(f,u,node,data)\n        f[1]=data.R*u[1]\n    end","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create physics struct","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    physics=VoronoiFVM.Physics(data=data,\n                               flux=flux,\n                               storage=storage,\n                               reaction=reaction\n                               )","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create discrete system and enabe species","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    sys=VoronoiFVM.DenseSystem(grid,physics)\n    enable_species!(sys,1,[1])","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create test functions for current measurement","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    factory=VoronoiFVM.TestFunctionFactory(sys)\n    tf0=testfunction(factory,[2],[1])\n    tfL=testfunction(factory,[1],[2])","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Solve steady state problem","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    sys.boundary_values[1,1]=1.0\n    sys.boundary_values[1,2]=0\n\n    sys.boundary_factors[1,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[1,2]=VoronoiFVM.Dirichlet\n\n    inival=unknowns(sys)\n    steadystate=unknowns(sys)\n    inival.=0.0\n    solve!(steadystate,inival,sys)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Create Impeadancs system from steady state","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    excited_spec=1\n    excited_bc=1\n    isys=VoronoiFVM.ImpedanceSystem(sys,steadystate,excited_spec, excited_bc)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"Prepare recording of impedance results","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    allomega=zeros(0)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"for calculated data","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    allI0=zeros(Complex{Float64},0)\n    allIL=zeros(Complex{Float64},0)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"for exact data","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"    allIx0=zeros(Complex{Float64},0)\n    allIxL=zeros(Complex{Float64},0)\n\n    ω0=0.5\n    ω1=1.0e4\n    ω=ω0\n\n    testval=0.0\n    UZ=unknowns(isys)\n    while ω<ω1\n\n        iω=1im*ω","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"solve impedance system","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        solve!(UZ,isys,ω)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"calculate aproximate solution","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        I0=integrate(isys,tf0,ω,UZ)[1]\n        IL=integrate(isys,tfL,ω,UZ)[1]","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"record approximate solution","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        push!(allomega, ω)\n        push!(allI0,I0)\n        push!(allIL,IL)","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"record exact solution","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        z=sqrt(iω*data.C/data.D+data.R/data.D);\n        eplus=exp(z*L);\n        eminus=exp(-z*L);\n        Ix0=-data.D*z*(eminus+eplus)/(eminus-eplus);\n        IxL=2.0*data.D*z/(eminus-eplus);\n        push!(allIx0,Ix0)\n        push!(allIxL,IxL)\n\n        if doplot\n            p=Plots.plot(grid.coord[1,:],real(UZ[1,:]),label=\"Re\", grid=true)\n            Plots.plot!(p,grid.coord[1,:],imag(UZ[1,:]),label=\"Im\")\n            Plots.gui(p)\n        end","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"increase omega","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"        ω=ω*1.2\n\n    end\n\n    if doplot\n        p=plot(grid=true)\n        plot!(p,real(allI0),imag(allI0),label=\"calc\")\n        plot!(p,real(allIx0),imag(allIx0),label=\"exact\")\n        gui(p)\n        readline()\n\n        p=plot(grid=true)\n        plot!(p,real(allIL),imag(allIL),label=\"calc\")\n        plot!(p,real(allIxL),imag(allIxL),label=\"exact\")\n        gui(p)\n        readline()\n    end\n    #return test value\n    return  imag(allIL[5])\nend\n\nfunction test()\n    main() ≈ 0.23106605162049176\nend\n\n\nend","category":"page"},{"location":"examples/Example150_Impedance1D/#","page":"150: Impedance calculation","title":"150: Impedance calculation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/#:-Unipolar-degenerate-drift-diffusion-1","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"","category":"section"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/#","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"module Example160_UnipolarDriftDiffusion1D\n\nusing Printf\nif isinteractive()\n    using Plots\nend\n\nusing VoronoiFVM\n\nmutable struct Data <: VoronoiFVM.AbstractData\n    eps::Float64\n    z::Float64\n    ic::Int32\n    iphi::Int32\n    Data()=new()\nend\n\n\n\nfunction plot_solution(sys,U0)\n    ildata=data(sys)\n    iphi=ildata.iphi\n    ic=ildata.ic\n        p=Plots.plot(grid=true)\n    @views begin\n        Plots.plot!(p,sys.grid.coord[1,:],U0[iphi,:], label=\"Potential\", color=:green)\n        Plots.plot!(p,sys.grid.coord[1,:],U0[ic,:], label=\"c-\", color=:blue)\n    end\n    gui(p)\nend\n\nfunction classflux!(f,u,edge,data)\n    uk=viewK(edge,u)\n    ul=viewL(edge,u)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=data.eps*(uk[iphi]-ul[iphi])\n    arg=uk[iphi]-ul[iphi]\n    bp,bm=fbernoulli_pm(uk[iphi]-ul[iphi])\n    f[ic]=bm*uk[ic]-bp*ul[ic]\nend\n\n\nfunction storage!(f,u,node,data)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=0\n    f[ic]=u[ic]\nend\n\nfunction reaction!(f,u,node,data)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=data.z*(1-2*u[ic])\n    f[ic]=0\nend\n\nfunction sedanflux!(f,u,edge,data)\n    uk=viewK(edge,u)\n    ul=viewL(edge,u)\n    ic=data.ic\n    iphi=data.iphi\n    f[iphi]=data.eps*(uk[iphi]-ul[iphi])\n    muk=-log(1-uk[ic])\n    mul=-log(1-ul[ic])\n    bp,bm=fbernoulli_pm(data.z*2*(uk[iphi]-ul[iphi])+(muk-mul))\n    f[ic]=bm*uk[ic]-bp*ul[ic]\nend\n\n\nfunction main(;n=20,doplot=false,dlcap=false,verbose=false,dense=false)\n\n    h=1.0/convert(Float64,n)\n    grid=VoronoiFVM.Grid(collect(0:h:1))\n\n    data=Data()\n    data.eps=1.0e-4\n    data.z=-1\n    data.iphi=1\n    data.ic=2\n\n    ic=data.ic\n    iphi=data.iphi\n\n\n    physics=VoronoiFVM.Physics(data=data,\n                               num_species=2,\n                               flux=sedanflux!,\n                               reaction=reaction!,\n                               storage=storage!\n                               )\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n\n    sys.boundary_values[iphi,1]=5\n    sys.boundary_values[iphi,2]=0.0\n\n    sys.boundary_factors[iphi,1]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[iphi,2]=VoronoiFVM.Dirichlet\n\n    sys.boundary_values[ic,2]=0.5\n    sys.boundary_factors[ic,2]=VoronoiFVM.Dirichlet\n\n    inival=unknowns(sys)\n    @views inival[iphi,:].=2\n    @views inival[ic,:].=0.5\n    U=unknowns(sys)\n\n\n    if doplot\n        plot_solution(sys,inival)\n    end\n\n    data.eps=1.0e-3\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    u1=0\n    if !dlcap\n        control.damp_initial=0.5\n        t=0.0\n        tend=1.0\n        tstep=1.0e-4\n        while t<tend\n            t=t+tstep\n            solve!(U,inival,sys,control=control,tstep=tstep)\n            inival.=U\n            u1=U[2]\n            if verbose\n                @printf(\"time=%g\\n\",t)\n            end\n            if doplot\n                plot_solution(sys,U)\n            end\n            tstep*=1.4\n        end\n        return u1\n    else\n        delta=1.0e-4\n        @views inival[iphi,:].=0\n        @views inival[ic,:].=0.5\n        sys.boundary_values[iphi,1]=0\n\n        dphi=1.0e-1\n        phimax=5\n        delta=1.0e-4\n        vplus=zeros(0)\n        cdlplus=zeros(0)\n        vminus=zeros(0)\n        cdlminus=zeros(0)\n        cdl=0\n        for dir in [1,-1]\n            phi=0.0\n            while phi<phimax\n                sys.boundary_values[iphi,1]=dir*phi\n                solve!(U,inival,sys,control=control)\n                inival.=U\n                Q=integrate(sys,physics.reaction,U)\n                sys.boundary_values[iphi,1]=dir*phi+delta\n                solve!(U,inival,sys,control=control)\n                inival.=U\n                if doplot\n                    plot_solution(sys,U)\n                end\n                Qdelta=integrate(sys,physics.reaction,U)\n                cdl=(Qdelta[iphi]-Q[iphi])/delta\n                if dir==1\n                    push!(vplus,dir*phi)\n                    push!(cdlplus,cdl)\n                else\n                    push!(vminus,dir*phi)\n                    push!(cdlminus,cdl)\n                end\n                phi+=dphi\n            end\n        end\n        if doplot\n            p=Plots.plot(grid=true)\n            Plots.plot!(p,vplus,cdlplus,color=:green)\n            Plots.plot!(p,vminus,cdlminus,color=:green)\n            gui(p)\n        end\n        return cdl\n    end\nend\n\nfunction test()\n        main(dense=false) ≈ 0.9999546021312723 &&\n            main(dense=true) ≈ 0.9999546021312723 &&\n            main(dlcap=true) ≈ .010759276468375045 &&\n            main(dlcap=true,dense=true) ≈ .010759276468375045\nend\nend","category":"page"},{"location":"examples/Example160_UnipolarDriftDiffusion1D/#","page":"160: Unipolar degenerate drift-diffusion","title":"160: Unipolar degenerate drift-diffusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/#:-2D-Nonlinear-Poisson-equation-1","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/Example205_NonlinearPoisson2D/#","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"module Example205_NonlinearPoisson2D\n\nusing Printf\nusing VoronoiFVM\n\nif isinteractive()\n    using Plots\nend\n\n\n\nfunction main(;n=10,doplot=false,verbose=false, dense=false)\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n\n    grid=VoronoiFVM.Grid(X,Y)\n\n    eps=1.0e-2\n\n    physics=VoronoiFVM.Physics(\n        num_species=1,\n        reaction=function(f,u,node,data)\n        f[1]=u[1]^2\n        end,\n\n        flux=function(f,u,edge,data)\n        f[1]=eps*(u[1]^2-u[2]^2)\n        end,\n\n        source=function(f,node,data)\n        x1=node.coord[1]-0.5\n        x2=node.coord[2]-0.5\n        f[1]=exp(-20.0*(x1^2+x2^2))\n        end,\n\n        storage=function(f,u,node,data)\n        f[1]=u[1]\n        end)\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n    enable_species!(sys,1,[1])\n\n    sys.boundary_values[1,2]=0.1\n    sys.boundary_values[1,4]=0.1\n\n    sys.boundary_factors[1,2]=VoronoiFVM.Dirichlet\n    sys.boundary_factors[1,4]=VoronoiFVM.Dirichlet\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0.5\n\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.max_lureuse=10\n    tstep=0.01\n    time=0.0\n    u15=0\n    while time<1.0\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        u15=U[15]\n        inival.=U\n\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n\n        tstep*=1.0\n        if doplot\n            levels=collect(0:0.01:1)\n            p=contourf(X,Y,reshape(values(U),length(X),length(Y)),levels=levels,colorbar=:right)\n            gui(p)\n        end\n    end\n    return u15\nend\n\nfunction test()\n    main(dense=false) ≈ 0.3554284760906605 &&\n        main(dense=true) ≈ 0.3554284760906605\nend\nend","category":"page"},{"location":"examples/Example205_NonlinearPoisson2D/#","page":"205: 2D Nonlinear Poisson equation","title":"205: 2D Nonlinear Poisson equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/#:-2D-Nonlinear-Poisson-with-reaction-1","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"","category":"section"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/#","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"module Example210_NonlinearPoisson2D_Reaction\n\nusing Printf\nusing VoronoiFVM\n\nif isinteractive()\n    using Plots\nend\n\n\n\n\nmutable struct MyData <: VoronoiFVM.AbstractData\n    eps::Float64\n    k::Float64\n    MyData()=new()\nend\n\n\n\nfunction main(;n=10,doplot=false,verbose=false, dense=false)\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n    grid=VoronoiFVM.Grid(X,Y)\n    data=MyData()\n\n    function reaction!(f,u,node,data)\n        f[1]=data.k*(u[1]-u[2])\n        f[2]=data.k*(u[2]-u[1])\n    end\n\n    function flux!(f,u,edge,data)\n        uk=viewK(2,u)\n        ul=viewL(2,u)\n        f[1]=data.eps*(uk[1]-ul[1])\n        f[2]=data.eps*(uk[2]-ul[2])\n    end\n\n    function source!(f,node,data)\n        x1=node.coord[1]-0.5\n        x2=node.coord[2]-0.5\n        f[1]=exp(-20*(x1^2+x2^2))\n    end\n\n    function storage!(f,u,node,data)\n        f[1]=u[1]\n        f[2]=u[2]\n    end\n\n\n    physics=VoronoiFVM.Physics(num_species=2,\n                               data=data,\n                               flux=flux!,\n                               storage=storage!,\n                               reaction=reaction!,\n                               source=source!)\n\n    data.eps=1.0e-2\n    data.k=1.0\n\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0.0\n\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    u15=0\n    while time<1\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        u15=U[15]\n        tstep*=1.0\n        istep=istep+1\n\n        @views if doplot\n            p1=contourf(X,Y,reshape(U[1,:],length(X),length(Y)),levels=collect(0:0.1:0.6),clim=(0,0.6),colorbar=:right,color=:viridis,title=@sprintf(\"max1=%g max2=%g\\n\",maximum(U[1,:]),maximum(U[2,:])))\n            p2=contourf(X,Y,reshape(U[2,:],length(X),length(Y)),levels=collect(0:0.1:0.6),clim=(0,0.6), colorbar=:right,color=:viridis)\n            p=Plots.plot(p1,p2,layout=(2,1) )\n            gui(p)\n        end\n    end\n    return u15\nend\n\nfunction test()\n    main(dense=false) ≈ 0.014566189535134827 &&\n        main(dense=true) ≈ 0.014566189535134827\nend\nend","category":"page"},{"location":"examples/Example210_NonlinearPoisson2D_Reaction/#","page":"210: 2D Nonlinear Poisson with reaction","title":"210: 2D Nonlinear Poisson with reaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/#:-2D-Nonlinear-Poisson-with-boundary-reaction-1","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"","category":"section"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/#","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"module Example215_NonlinearPoisson2D_BoundaryReaction\n\nusing Printf\nusing VoronoiFVM\nconst Node=VoronoiFVM.Node\nconst Edge=VoronoiFVM.Edge\n\nif isinteractive()\n    using Plots\nend\n\nfunction main(;n=10,doplot=false,verbose=false, dense=false)\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n    grid=VoronoiFVM.Grid(X,Y)\n\n\n    eps=1.0e-2\n    k=1.0\n    physics=VoronoiFVM.Physics(\n        num_species=2,\n        breaction=function(f,u,node,data)\n        if  node.region==2\n            f[1]=k*(u[1]-u[2])\n            f[2]=k*(u[2]-u[1])\n        else\n            f[1]=0\n            f[2]=0\n        end\n        end,\n\n    flux=function(f,u,edge,data)\n        uk=viewK(2,u)\n        ul=viewL(2,u)\n        f[1]=eps*(uk[1]-ul[1])\n        f[2]=eps*(uk[2]-ul[2])\n    end,\n\n    source=function(f,node,data)\n        x1=node.coord[1]-0.5\n        x2=node.coord[2]-0.5\n        f[1]=exp(-20.0*(x1^2+x2^2))\n    end,\n\n    storage=function(f,u,node,data)\n        f[1]=u[1]\n        f[2]=u[2]\n    end)\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n\n\n    inival=unknowns(sys)\n    U=unknowns(sys)\n    inival.=0.0\n\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    u25=0\n    while time<1\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/#","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"for i in eachindex(U)     inival[i]=U[i] end","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/#","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n\n        tstep*=1.0\n        istep=istep+1\n        u25=U[25]\n        @views if doplot\n            p1=contourf(X,Y,reshape(U[1,:],length(X),length(Y)),levels=collect(0:0.125:0.75),clim=(0,0.75),colorbar=:right,color=:viridis,title=@sprintf(\"max1=%g max2=%g\\n\",maximum(U[1,:]),maximum(U[2,:])))\n            p2=contourf(X,Y,reshape(U[2,:],length(X),length(Y)),levels=collect(0:0.0025:0.02),clim=(0,0.02), colorbar=:right,color=:viridis)\n            p=Plots.plot(p1,p2,layout=(2,1) )\n            gui(p)\n        end\n    end\n    return u25\nend\n\nfunction test()\n    main() ≈ 0.008761335823958986 &&\n    main(dense=true) ≈ 0.008761335823958986\nend\nend","category":"page"},{"location":"examples/Example215_NonlinearPoisson2D_BoundaryReaction/#","page":"215: 2D Nonlinear Poisson with boundary reaction","title":"215: 2D Nonlinear Poisson with boundary reaction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/#:-2D-Nonlinear-Poisson-with-boundary-reaction-and-boundary-species-1","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"","category":"section"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/#","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"module Example220_NonlinearPoisson2D_BoundarySpecies\n\nusing Printf\nusing VoronoiFVM\n\n\nif isinteractive()\n    using Plots\nend\n\nfunction main(;n=10,doplot=false,verbose=false,dense=false)\n\n\n    h=1.0/convert(Float64,n)\n    X=collect(0.0:h:1.0)\n    Y=collect(0.0:h:1.0)\n\n\n\n    grid=VoronoiFVM.Grid(X,Y)\n\n\n    k=1.0\n    eps=1.0\n    physics=VoronoiFVM.Physics(\n    num_species=3,\n    breaction=function(f,u,node,data)\n        if  node.region==2\n            f[1]=k*(u[1]-u[3])\n            f[3]=k*(u[3]-u[1])+ k*(u[3]-u[2])\n            f[2]=k*(u[2]-u[3])\n        end\n    end,\n\n    bstorage=function(f,u,node,data)\n        if  node.region==2\n            f[3]=u[3]\n        end\n    end,\n\n\n    flux=function(f,u,edge,data)\n        uk=viewK(edge,u)\n        ul=viewL(edge,u)\n        f[1]=eps*(uk[1]-ul[1])\n        f[2]=eps*(uk[2]-ul[2])\n    end,\n\n    source=function(f,node,physics)\n        x1=node.coord[1]-0.5\n        x2=node.coord[2]-0.5\n        f[1]=exp(-20.0*(x1^2+x2^2))\n    end,\n\n    storage=function(f,u,node,data)\n        f[1]=u[1]\n        f[2]=u[2]\n    end\n    )\n\n    if dense\n        sys=VoronoiFVM.DenseSystem(grid,physics)\n    else\n        sys=VoronoiFVM.SparseSystem(grid,physics)\n    end\n\n    enable_species!(sys,1,[1])\n    enable_species!(sys,2,[1])\n    enable_boundary_species!(sys,3,[2])\n\n\n    function tran32!(a,b)\n        a[1]=b[2]\n    end\n\n    bgrid2=subgrid(grid,[2],boundary=true,transform=tran32!)\n\n    inival=unknowns(sys)\n    inival.=0.0\n    U=unknowns(sys)\n\n    eps=1.0e-2\n\n    control=VoronoiFVM.NewtonControl()\n    control.verbose=verbose\n    control.tol_linear=1.0e-5\n    control.tol_relative=1.0e-5\n    control.max_lureuse=0\n    tstep=0.01\n    time=0.0\n    istep=0\n    u5=0\n    while time<1\n        time=time+tstep\n        solve!(U,inival,sys,control=control,tstep=tstep)\n        inival.=U\n        if verbose\n            @printf(\"time=%g\\n\",time)\n        end\n        tstep*=1.0\n        istep=istep+1\n        U_bound=view(U,bgrid2)\n        u5=U_bound[3,5]\n        @views if doplot\n            p1=contourf(X,Y,reshape(U[1,:],length(X),length(Y)),levels=collect(0:0.1:0.6),clim=(0,0.6),colorbar=:right,color=:viridis,title=@sprintf(\"max1=%g max2=%g maxb=%g\\n\",maximum(U[1,:]),maximum(U[2,:]),maximum(U_bound[3,:])))\n            p2=contourf(X,Y,reshape(U[2,:],length(X),length(Y)),levels=collect(0:0.0001:0.002),clim=(0,0.002), colorbar=:right,color=:viridis)\n            p3=plot(grid=true,ylims=(0,0.0025))\n            fvmplot!(p3,bgrid2,U_bound[3,:])\n            p=Plots.plot(p1,p2,p3,layout=(3,1) )\n            gui(p)\n        end\n    end\n    return u5\nend\n\nfunction test()\n    main() ≈ 0.0020781361856598\n    main(dense=true) ≈ 0.0020781361856598\nend\nend","category":"page"},{"location":"examples/Example220_NonlinearPoisson2D_BoundarySpecies/#","page":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","title":"220: 2D Nonlinear Poisson with boundary reaction and boundary species","text":"This page was generated using Literate.jl.","category":"page"}]
}
