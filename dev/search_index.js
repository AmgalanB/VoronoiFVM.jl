var documenterSearchIndex = {"docs":
[{"location":"#VoronoiFVM-1","page":"Home","title":"VoronoiFVM","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Solver for coupled nonlinear partial differential equations based on the two point flux finite volume method on admissible grids.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This Julia package merges the ideas behind pdelib/fvsys with the multiple dispatch paradigm of Julia. It allows to avoid the implementation of function derivatives. It instead uses the ForwardDiff and DiffResults  to evaluate user fucntions along with their jacobians.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"So far this is merely a design study to learn and evaluate Julia.   It is however aimed to be feasible at least for small projects.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"It requires Julia 1.0.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Documentation created with Documenter.jl resides here","category":"page"},{"location":"install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"So far, the package has not been registered with the Julia central, however Julia provides the possibility to install packages from any accessible git repo.","category":"page"},{"location":"install/#Canonical-Julia-method-1","page":"Installation","title":"Canonical Julia method","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"Go into package manager  (] key) and add the package via the repo name:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     pkg> add https://github.com/j-fu/VoronoiFVM.jl","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"or ","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     pkg> add https://repos.wias-berlin.de/users/fuhrmann/projects/julia-packages/VoronoiFVM.jl","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"This also will consistently pull in any necessary package dependencies.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"You can run the test suite","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     pkg> test VoronoiFVM","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"If you don't like this anymore (or want to switch between remote repos), you can remove it:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     pkg> remove VoronoiFVM","category":"page"},{"location":"install/#Old-method-(which-still-works)-1","page":"Installation","title":"Old method (which still works)","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"Steps:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Create a directory for Julia packages which have not been registered, let us denote this as PKG_DIR","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"cd to PKG_DIR and clone this repository:\nEither from WIAS rhodecode server","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     git clone  https://repos.wias-berlin.de/users/fuhrmann/projects/julia-packages/VoronoiFVM","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":" Or from github:","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     git clone  https://github.com/j-fu/VoronoiFVM.jl VoronoiFVM","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Add the following line to  the file .julia/config/startup.jl in your  home directory (create this file it does not exist). PKG_DIR must be the full path name of the directory.","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"     push!(LOAD_PATH, \"PKG_DIR\")","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Now, using VoronoiFVM should work in Julia scripts.","category":"page"},{"location":"changes/#Changes-1","page":"Changes","title":"Changes","text":"","category":"section"},{"location":"changes/#V0.4,-July-12,-2019-1","page":"Changes","title":"V0.4, July 12, 2019","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Enhance Newton solver by embedding, exception handling\nReplace SparseMatrixCSC with ExtendableSparseMatrix\nfixed allocation issues in assembly\nassured that users get allocation stuff right via typed functions in physics structure\nmore julianic API","category":"page"},{"location":"changes/#V0.3,-April-9-2019-1","page":"Changes","title":"V0.3, April 9 2019","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Renamed to  VoronoiFVM\nComplete rewrite of assembly allowing sparse or dense matrix  to store degree of freedom information\nSolution is a nnodes x nspecies sparse or dense matrix\nThe wonderful array interface of Julia still provides slicing etc in oder to access  species without need to write any bulk_solution stuff or whatever when using the sparse variant\nRe-export value() for debugging in physics functions\nTest function handling for flux calculation\nFirst working steps to impedance handling\nAbolished Graph in favor of  Grid, Graph was premature optimization...","category":"page"},{"location":"changes/#V0.2,-Feb-20,-2019-1","page":"Changes","title":"V0.2, Feb 20, 2019","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Changed signature of all callback functions: This also allows to pass user defined arrays etc. to the callback functions. In particular, velocity vectors can be passed this way.\nBesides of flux!(), they now all have node::VoronoiFVM.Node as a second argument.\nflux!() has edge::VoronoiFVM.Edge as a second argument\nthe x argument in source!() is omitted, the same data  are now found in node.coord","category":"page"},{"location":"changes/#","page":"Changes","title":"Changes","text":"New method edgelength(edge::VoronoiFVM.Edge)","category":"page"},{"location":"changes/#V0.1,-Dec.-2018-1","page":"Changes","title":"V0.1, Dec. 2018","text":"","category":"section"},{"location":"changes/#","page":"Changes","title":"Changes","text":"Initial release","category":"page"},{"location":"grid/#Grid-1","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"grid/#Types-and-Constants-1","page":"Grid","title":"Types and Constants","text":"","category":"section"},{"location":"grid/#","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_grid.jl\",\"vfvm_tools.jl\"]\nOrder = [:type]","category":"page"},{"location":"grid/#VoronoiFVM.AbstractGrid","page":"Grid","title":"VoronoiFVM.AbstractGrid","text":"abstract type AbstractGrid\n\nAbstract type for grid like datastructures VoronoiFVM.Grid and VoronoiFVM.SubGrid.\n\n\n\n\n\n","category":"type"},{"location":"grid/#VoronoiFVM.Grid","page":"Grid","title":"VoronoiFVM.Grid","text":"struct Grid{Tc} <: VoronoiFVM.AbstractGrid\n\nStructure holding grid data. It is parametrised by the type Tc of coordinates.\n\ncoord::Array{Tc,2} where Tc\n2D Array of node coordinates\n\ncellnodes::Array{Int32,2}\n2D Array of node indices per grid cell\n\ncellregions::Array{Int32,1}\nArray of cell region numbers\n\nbfacenodes::ElasticArrays.ElasticArray{Int32,2,1}\n2D Array of node indices per boundary face\n\nbfaceregions::Array{Int32,1}\nArray of boundary face region numbers\n\nnum_cellregions::Array{Int32,1}\nNumber of inner cell regions. Stored in an array in order to keep the struct immutable.\n\nnum_bfaceregions::Array{Int32,1}\nNumber of boundary face  regions. Stored in an array in order to keep the struct immutable.\n\ncelledgenodes::Array{Int32,2}\n2D Array describing local scheme of distributions nodes per cell edge.\n\n\n\n\n\n","category":"type"},{"location":"grid/#VoronoiFVM.Grid-Union{Tuple{Array{Tc,1}}, Tuple{Tc}} where Tc","page":"Grid","title":"VoronoiFVM.Grid","text":"Constructor for 1D grid.\n\nConstruct 1D grid from an array of node cordinates. It creates two boundary regions with index 1 at the left end and index 2 at the right end.\n\nPrimal grid holding unknowns: marked by o, dual grid marking control volumes: marked by |.\n\n o-----o-----o-----o-----o-----o-----o-----o-----o\n |--|-----|-----|-----|-----|-----|-----|-----|--|\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.Grid-Union{Tuple{Tc}, Tuple{Array{Tc,1},Array{Tc,1}}} where Tc","page":"Grid","title":"VoronoiFVM.Grid","text":"Grid(X, Y)\n\n\nConstructor for 2D grid from coordinate arrays.  Boundary region numbers count counterclockwise:\n\nlocation number\nsouth 1\neast 2\nnorth 3\nwest 4\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.SubGrid","page":"Grid","title":"VoronoiFVM.SubGrid","text":"struct SubGrid{Tc} <: VoronoiFVM.AbstractGrid\n\nSubgrid of parent grid (mainly for visualization purposes). Intended to hold support of species which are not defined everywhere.\n\nparent::VoronoiFVM.Grid\nParent Grid\n\nnode_in_parent::Array{Int32,1}\nIncidence between subgrid node numbers and node numbers in parent.\n\ncoord::Array{Tc,2} where Tc\n2D Array of coordinates per grid node\n\ncellnodes::Array{Int32,2}\n2D Array of node numbers per grid cell\n\n\n\n\n\n","category":"type"},{"location":"grid/#","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_grid.jl\",\"vfvm_tools.jl\"]\nOrder = [:constant]","category":"page"},{"location":"grid/#Methods-1","page":"Grid","title":"Methods","text":"","category":"section"},{"location":"grid/#","page":"Grid","title":"Grid","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_grid.jl\",\"vfvm_tools.jl\"]\nOrder = [:function]","category":"page"},{"location":"grid/#VoronoiFVM.bfacemask!-Tuple{VoronoiFVM.Grid,AbstractArray,AbstractArray,Int64}","page":"Grid","title":"VoronoiFVM.bfacemask!","text":"bfacemask!(grid::VoronoiFVM.Grid, maskmin::AbstractArray, maskmax::AbstractArray, ireg::Int64; eps) -> Int64\n\n\nEdit region numbers of grid  boundary facets  via rectangular mask. Currently, only for 1D grids, inner boundaries can be added.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.cellmask!-Tuple{VoronoiFVM.Grid,AbstractArray,AbstractArray,Int64}","page":"Grid","title":"VoronoiFVM.cellmask!","text":"cellmask!(grid::VoronoiFVM.Grid, maskmin::AbstractArray, maskmax::AbstractArray, ireg::Int64; eps) -> Int64\n\n\nEdit region numbers of grid cells via rectangular mask.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_bfaces-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_bfaces","text":"num_bfaces(grid::VoronoiFVM.Grid) -> Int64\n\n\nNumber of boundary faces in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_cells-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.num_cells","text":"num_cells(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nNumber of cells in grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_nodes-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.num_nodes","text":"num_nodes(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nNumber of nodes in grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.subgrid-Tuple{VoronoiFVM.Grid,AbstractArray}","page":"Grid","title":"VoronoiFVM.subgrid","text":"subgrid(parent::VoronoiFVM.Grid, subregions::AbstractArray; transform, boundary) -> VoronoiFVM.SubGrid{_1} where _1\n\n\nCreate subgrid of list of regions.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.glue-Union{Tuple{Tv}, Tuple{Array{Tv,1},Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.glue","text":"Glue together two vectors a and b resulting in a vector c. They last element  of a shall be equal (up to tol) to the first element of b. The result fulfills length(c)=length(a)+length(b)-1\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.value","page":"Grid","title":"VoronoiFVM.value","text":"Extract value from dual number. Use to debug physics callbacks. Re-exported from ForwardDiff.jl\n\n\n\n\n\n","category":"function"},{"location":"grid/#Base.eltype-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"Base.eltype","text":"eltype(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nReturn element type of grid coordinates.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.bfacefactors!-Union{Tuple{Tv}, Tuple{Grid{Tv},Int64,Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.bfacefactors!","text":"bfacefactors!(grid, icell, nodefac)\n\n\nCalculate node volume  and voronoi surface contributions for boundary face.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.bfacenode-Tuple{VoronoiFVM.Grid,Any,Any}","page":"Grid","title":"VoronoiFVM.bfacenode","text":"bfacenode(grid::VoronoiFVM.Grid, inode::Any, icell::Any) -> Any\n\n\nIndex of boundary face node.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.celledgenode-Tuple{VoronoiFVM.Grid,Any,Any,Any}","page":"Grid","title":"VoronoiFVM.celledgenode","text":"celledgenode(grid::VoronoiFVM.Grid, inode::Any, iedge::Any, icell::Any) -> Any\n\n\nIndex of cell edge node.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.cellfactors!-Union{Tuple{Tv}, Tuple{Grid{Tv},Int64,Array{Tv,1},Array{Tv,1}}} where Tv","page":"Grid","title":"VoronoiFVM.cellfactors!","text":"cellfactors!(grid, icell, nodefac, edgefac)\n\n\nCalculate node volume  and voronoi surface contributions for cell.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.cellnode-Tuple{VoronoiFVM.AbstractGrid,Any,Any}","page":"Grid","title":"VoronoiFVM.cellnode","text":"cellnode(grid::VoronoiFVM.AbstractGrid, inode::Any, icell::Any) -> Any\n\n\nReturn index of i-th local node in cell icell\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.dim_grid-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.dim_grid","text":"dim_grid(grid::VoronoiFVM.Grid) -> Int64\n\n\nTopological dimension of grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.dim_space-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.dim_space","text":"dim_space(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nSpace dimension of grid\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.nodecoord-Tuple{VoronoiFVM.AbstractGrid,Any}","page":"Grid","title":"VoronoiFVM.nodecoord","text":"nodecoord(grid::VoronoiFVM.AbstractGrid, inode::Any) -> SubArray\n\n\nReturn view of coordinates of node inode.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_bfaceregions-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_bfaceregions","text":"num_bfaceregions(grid::VoronoiFVM.Grid) -> Int32\n\n\nNumber of boundary face regions in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_cellregions-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_cellregions","text":"num_cellregions(grid::VoronoiFVM.Grid) -> Int32\n\n\nNumber of cell regions in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_edges_per_cell-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_edges_per_cell","text":"num_edges_per_cell(grid::VoronoiFVM.Grid) -> Int64\n\n\nNumber of edges per grid cell.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_nodes_per_bface-Tuple{VoronoiFVM.Grid}","page":"Grid","title":"VoronoiFVM.num_nodes_per_bface","text":"num_nodes_per_bface(grid::VoronoiFVM.Grid) -> Int64\n\n\nNumber of nodes per boundary face\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.num_nodes_per_cell-Tuple{VoronoiFVM.AbstractGrid}","page":"Grid","title":"VoronoiFVM.num_nodes_per_cell","text":"num_nodes_per_cell(grid::VoronoiFVM.AbstractGrid) -> Any\n\n\nReturn number of nodes per cell in grid.\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.reg_bface-Tuple{VoronoiFVM.Grid,Any}","page":"Grid","title":"VoronoiFVM.reg_bface","text":"reg_bface(grid::VoronoiFVM.Grid, icell::Any) -> Any\n\n\nBoundary region number for boundary face\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.reg_cell-Tuple{VoronoiFVM.Grid,Any}","page":"Grid","title":"VoronoiFVM.reg_cell","text":"reg_cell(grid::VoronoiFVM.Grid, icell::Any) -> Any\n\n\nBulk region number for cell\n\n\n\n\n\n","category":"method"},{"location":"grid/#VoronoiFVM.geomspace-Union{Tuple{Tv}, NTuple{4,Tv}, Tuple{Tv,Tv,Tv,Tv,Any}} where Tv","page":"Grid","title":"VoronoiFVM.geomspace","text":"geomspace(a, b, ha, hb)\ngeomspace(a, b, ha, hb, tol)\n\n\n(Try to) create a subdivision of interval (a,b) stored in the  returned array X such that \n\nX[1]==a, X[end]==b\n(X[2]-X[1])<=ha+tol*(b-a)\n(X[end]-X[end-1])<=hb+tol*(b-a)\nThere is a number q such that  X[i+1]-X[i] == q*(X[i]-X[i-1])\nX is the array with the minimal possible number of points with the above property\n\nCaveat: the algorithm behind this is  well tested but unproven.\n\nReturns an Array containing the points of the subdivision.\n\n\n\n\n\n","category":"method"},{"location":"physics/#Physics-1","page":"Physics","title":"Physics","text":"","category":"section"},{"location":"physics/#Types-and-Constants-1","page":"Physics","title":"Types and Constants","text":"","category":"section"},{"location":"physics/#","page":"Physics","title":"Physics","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:type]","category":"page"},{"location":"physics/#VoronoiFVM.AbstractData","page":"Physics","title":"VoronoiFVM.AbstractData","text":"abstract type AbstractData\n\nAbstract type for user data.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.AbstractPhysics","page":"Physics","title":"VoronoiFVM.AbstractPhysics","text":"abstract type AbstractPhysics\n\nAbstract type for physics.\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics","page":"Physics","title":"VoronoiFVM.Physics","text":"struct Physics{Flux<:Function, Reaction<:Function, Storage<:Function, Source<:Function, BReaction<:Function, BStorage<:Function, D<:VoronoiFVM.AbstractData} <: VoronoiFVM.AbstractPhysics\n\nPhysics data record.\n\nflux::Function\nFlux between neigboring control volumes\n\nstorage::Function\nStorage term (term under time derivative)\n\nreaction::Function\nReaction term\n\nsource::Function\n\" Source term\n\nbreaction::Function\nBoundary reaction term\n\nbstorage::Function\nBoundary storage term\n\ndata::VoronoiFVM.AbstractData\nUser data (parameters)\n\nnum_species::Int8\nNumber of species\n\n\n\n\n\n","category":"type"},{"location":"physics/#VoronoiFVM.Physics-Tuple{}","page":"Physics","title":"VoronoiFVM.Physics","text":"Physics(; num_species, data, flux, reaction, storage, source, breaction, bstorage) -> VoronoiFVM.Physics{typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),typeof(VoronoiFVM.nofunc),VoronoiFVM.NoData}\n\n\nConstructor for physics data with default values.\n\n\n\n\n\n","category":"method"},{"location":"physics/#","page":"Physics","title":"Physics","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:constants]","category":"page"},{"location":"physics/#Methods-1","page":"Physics","title":"Methods","text":"","category":"section"},{"location":"physics/#","page":"Physics","title":"Physics","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_physics.jl\",\"vfvm_functions.jl\"]\nOrder = [:function]","category":"page"},{"location":"physics/#VoronoiFVM.fbernoulli-Tuple{Real}","page":"Physics","title":"VoronoiFVM.fbernoulli","text":"fbernoulli(x::Real) -> Any\n\n\nBernoulli function implementation for exponentially fitted finite volumes.\n\nThe name fbernoulli has been chosen to avoid confusion with Bernoulli from JuliaStats/Distributions.jl\n\nReturns a real number containing the result.\n\n\n\n\n\n","category":"method"},{"location":"physics/#VoronoiFVM.fbernoulli_pm-Tuple{Real}","page":"Physics","title":"VoronoiFVM.fbernoulli_pm","text":"fbernoulli_pm(x::Real) -> Tuple{Any,Any}\n\n\nBernoulli function implementation for exponentially fitted finite volumes, joint evaluation for positive and negative argument\n\nUsually, we need B(x), B(-x) togehter,  and it is cheaper to calculate them together.\n\nReturns two real numbers containing the result for argument x and argument -x.\n\n\n\n\n\n","category":"method"},{"location":"system/#System-1","page":"System","title":"System","text":"","category":"section"},{"location":"system/#Types-and-Constants-1","page":"System","title":"Types and Constants","text":"","category":"section"},{"location":"system/#","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_system.jl\",\"vfvm_solver.jl\",\"vfvm_newtoncontrol.jl\", \"vfvm_testfunctions.jl\"]\nOrder = [:type]","category":"page"},{"location":"system/#VoronoiFVM.AbstractSystem","page":"System","title":"VoronoiFVM.AbstractSystem","text":"abstract type AbstractSystem\n\nAbstract type for finite volume system structure\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.BNode","page":"System","title":"VoronoiFVM.BNode","text":"mutable struct BNode{Tv}\n\nStructure holding local boundary  node information.\n\nindex::Int32\nIndex in grid\n\nregion::Int32\nBoundary region number\n\ncoord::Array{Tv,1} where Tv\n1D Array of node coordinates\n\nnspec::Int64\nNumber of species defined in node\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSystem","page":"System","title":"VoronoiFVM.DenseSystem","text":"mutable struct DenseSystem{Tv} <: VoronoiFVM.AbstractSystem{Tv}\n\nStructure holding data for finite volume system solution. Information on species distribution is kept in dense matrices, and the solution array is of type Array{2}.\n\nUnlike in the SparseSystem, the system matrix handles exactly those degrees of freedom which correspond to unknowns, and dummy  degrees of freedom where unknowns are not defined. Handling of the sparse matrix structures for the bookeeping of the unknowns has less overhead, but additional dummy equations are added to the system matrix.\n\ngrid::VoronoiFVM.Grid\nGrid\n\nphysics::VoronoiFVM.Physics\nPhysics data\n\nboundary_values::Array{Tv,2} where Tv\nArray of boundary values\n\nboundary_factors::Array{Tv,2} where Tv\nArray of boundary factors\n\nregion_species::Array{Int8,2}\nFull matrix containing species numbers for inner regions\n\nbregion_species::Array{Int8,2}\nFull matrix containing species numbers for boundary regions\n\nnode_dof::Array{Int8,2}\nFull matrix containing degree of freedom numbers for each node\n\nmatrix::SparseArrays.SparseMatrixCSC{Tv,Int64} where Tv\nJacobi matrix for nonlinear problem\n\nspecies_homogeneous::Bool\nFlag which says if the number of unknowns per node is constant\n\nupdate::Array{Tv,2} where Tv\nSolution vector holding Newton update\n\nresidual::Array{Tv,2} where Tv\nSolution vector holding Newton residual\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.DenseSystem-Tuple{VoronoiFVM.Grid,VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.DenseSystem","text":"DenseSystem(grid::VoronoiFVM.Grid, physics::VoronoiFVM.Physics) -> VoronoiFVM.DenseSystem{_1} where _1\n\n\nConstructor for DenseSystem. physics provides some user data, maxspec is the maximum number of species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.Edge","page":"System","title":"VoronoiFVM.Edge","text":"mutable struct Edge{Tv}\n\nStructure holding local edge information.\n\nindex::Int32\nIndex in grid\n\nnodeK::Int32\nIndex of first node\n\nnodeL::Int32\nIndex of second node\n\nregion::Int32\nInner region number corresponding to edge\n\ncoordK::Array{Tv,1} where Tv\n1D Array of first node coordinates\n\ncoordL::Array{Tv,1} where Tv\n1D Array of second node coordinates\n\nnspec::Int64\nNumber of species defined in edge\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.Node","page":"System","title":"VoronoiFVM.Node","text":"mutable struct Node{Tv}\n\nStructure holding local node information.\n\nindex::Int32\nIndex in grid\n\nregion::Int32\nInner region number\n\ncoord::Array{Tv,1} where Tv\n1D Array of node coordinates\n\nnspec::Int64\nNumber of species defined in node\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSolutionArray","page":"System","title":"VoronoiFVM.SparseSolutionArray","text":"struct SparseSolutionArray{Tv} <: AbstractArray{Tv,2}\n\nStruct holding solution information for SparseSystem. Solution is stored in a sparse matrix structure.\n\nThis class plays well with the abstract array interface.\n\nnode_dof::SparseArrays.SparseMatrixCSC{Tv,Int32} where Tv\nSparse matrix holding actual data.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSystem","page":"System","title":"VoronoiFVM.SparseSystem","text":"mutable struct SparseSystem{Tv} <: VoronoiFVM.AbstractSystem{Tv}\n\nStructure holding data for finite volume system solution. Information on species distribution is kept in sparse matrices, and the solution array is of type SparseSolutionArray, i.e. effectively it is a sparse matrix.\n\nUnlike in the DenseSystem, the system matrix handles exactly those degrees of freedom which correspond to unknowns. However, handling of the sparse matrix structures for the bookeeping of the unknowns creates overhead.\n\ngrid::VoronoiFVM.Grid\nGrid\n\nphysics::VoronoiFVM.Physics\nPhysics data\n\nboundary_values::Array{Tv,2} where Tv\nArray of boundary values\n\nboundary_factors::Array{Tv,2} where Tv\nArray of boundary factors\n\nregion_species::SparseArrays.SparseMatrixCSC{Int8,Int16}\nSparse matrix containing species numbers for inner regions\n\nbregion_species::SparseArrays.SparseMatrixCSC{Int8,Int16}\nSparse matrix containing species numbers for boundary regions\n\nnode_dof::SparseArrays.SparseMatrixCSC{Int8,Int32}\nSparse matrix containing degree of freedom numbers for each node\n\nmatrix::ExtendableSparse.ExtendableSparseMatrix{Tv,Int64} where Tv\nJacobi matrix for nonlinear problem\n\nspecies_homogeneous::Bool\nFlag which says if the number of unknowns per node is constant\n\nupdate::VoronoiFVM.SparseSolutionArray\nSolution vector holding Newton update\n\nresidual::VoronoiFVM.SparseSolutionArray\nSolution vector holding Newton residual\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.SparseSystem-Tuple{VoronoiFVM.Grid,VoronoiFVM.Physics}","page":"System","title":"VoronoiFVM.SparseSystem","text":"SparseSystem(grid::VoronoiFVM.Grid, physics::VoronoiFVM.Physics) -> VoronoiFVM.SparseSystem{_1} where _1\n\n\nConstructor for SparseSystem. physics provides some user data, maxspec is the maximum number of species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.SubgridArrayView","page":"System","title":"VoronoiFVM.SubgridArrayView","text":"struct SubgridArrayView{Tv, Ta} <: AbstractArray{Tv,2}\n\nStruct holding information for solution array view on subgrid\n\nsysarray::Any\nOriginal array\n\nsubgrid::VoronoiFVM.SubGrid\nSubgrid for view\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.AssemblyError","page":"System","title":"VoronoiFVM.AssemblyError","text":"struct AssemblyError <: Exception\n\nException thrown if error occured during assembly (e.g. domain error)\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.ConvergenceError","page":"System","title":"VoronoiFVM.ConvergenceError","text":"struct ConvergenceError <: Exception\n\nException thrown if Newton's method convergence fails.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.EmbeddingError","page":"System","title":"VoronoiFVM.EmbeddingError","text":"struct EmbeddingError <: Exception\n\nException thrown if embedding fails\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.FactorizationError","page":"System","title":"VoronoiFVM.FactorizationError","text":"struct FactorizationError <: Exception\n\nException thrown if error occured during factorization.\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.NewtonControl","page":"System","title":"VoronoiFVM.NewtonControl","text":"mutable struct NewtonControl\n\nControl parameter structure for Newton method.\n\ntol_absolute::Float64\nTolerance (in terms of norm of Newton update)\n\ntol_relative::Float64\nTolerance (relative to the first residual)\n\ntol_round::Float64\nTolerance for roundoff error detection\n\ndamp_initial::Float64\nInitial damping parameter\n\ndamp_growth::Float64\nDamping parameter growth factor\n\nmax_iterations::Int32\nMaximum number of iterations\n\nmax_lureuse::Int32\nMaximum number of reuses of lu factorization\n\nmax_round::Int32\nMaximum number of consecutive iterations within roundoff error tolerance\n\ntol_linear::Float64\nTolerance of iterative linear solver\n\nverbose::Bool\nVerbosity flag\n\nhandle_exceptions::Bool\nHandle exceptions\n\nΔp::Float64\nParameter step for embedding\n\nΔp_max::Float64\nMaximal parameter step\n\nΔp_min::Float64\nMinimal parameter step\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.NewtonControl-Tuple{Any}","page":"System","title":"VoronoiFVM.NewtonControl","text":"NewtonControl(this::Any) -> Any\n\n\nDefault constructor\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.TestFunctionFactory","page":"System","title":"VoronoiFVM.TestFunctionFactory","text":"mutable struct TestFunctionFactory{Tv}\n\nData structure containing DenseSystem used to calculate test functions for boundary flux calculations.\n\nsystem::VoronoiFVM.AbstractSystem{Tv} where Tv\nOriginal system\n\ntfsystem::VoronoiFVM.DenseSystem\nTest function system\n\n\n\n\n\n","category":"type"},{"location":"system/#VoronoiFVM.TestFunctionFactory-Union{Tuple{AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.TestFunctionFactory","text":"TestFunctionFactory(system)\n\n\nConstructor for TestFunctionFactory from System\n\n\n\n\n\n","category":"method"},{"location":"system/#","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_system.jl\",\"vfvm_solver.jl\",\"vfvm_newtoncontrol.jl\", \"vfvm_testfunctions.jl\"]\nOrder = [:constant]","category":"page"},{"location":"system/#VoronoiFVM.Dirichlet","page":"System","title":"VoronoiFVM.Dirichlet","text":"Constant to be used as boundary condition factor  to mark Dirichlet boundary conditons.    \n\n\n\n\n\n","category":"constant"},{"location":"system/#Methods-1","page":"System","title":"Methods","text":"","category":"section"},{"location":"system/#","page":"System","title":"System","text":"Modules = [VoronoiFVM]\nPages = [\"vfvm_system.jl\",\"vfvm_solver.jl\",\"vfvm_newtoncontrol.jl\", \"vfvm_testfunctions.jl\"]\nOrder = [:function]","category":"page"},{"location":"system/#VoronoiFVM.data-Union{Tuple{AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.data","text":"Retrieve user data record.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.dof-Union{Tuple{Tv}, Tuple{Array{Tv,2},Integer,Integer}} where Tv","page":"System","title":"VoronoiFVM.dof","text":"dof(a::Tv, ispec::Tv, K::Tv)\n\n\nGet number of degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.dof-Union{Tuple{Tv}, Tuple{SparseSolutionArray{Tv},Integer,Integer}} where Tv","page":"System","title":"VoronoiFVM.dof","text":"dof(a::Tv, i::Tv, j::Tv)\n\n\nGet number of degree of freedom. Return 0 if species is not defined in node.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_boundary_species!-Tuple{VoronoiFVM.AbstractSystem,Integer,AbstractArray{T,1} where T}","page":"System","title":"VoronoiFVM.enable_boundary_species!","text":"enable_boundary_species!(this::VoronoiFVM.AbstractSystem, ispec::Integer, regions::AbstractArray{T,1} where T)\n\n\nAdd species to a list of boundary regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.enable_species!-Tuple{VoronoiFVM.AbstractSystem,Integer,AbstractArray{T,1} where T}","page":"System","title":"VoronoiFVM.enable_species!","text":"enable_species!(this::VoronoiFVM.AbstractSystem, ispec::Integer, regions::AbstractArray{T,1} where T)\n\n\nAdd species to a list of bulk regions. Species numbers for bulk and boundary species have to be distinct.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.getdof-Tuple{VoronoiFVM.SparseSolutionArray,Integer}","page":"System","title":"VoronoiFVM.getdof","text":"getdof(a::VoronoiFVM.SparseSolutionArray, i::Integer) -> Any\n\n\nReturn  value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_nodes-Tuple{Any}","page":"System","title":"VoronoiFVM.num_nodes","text":"num_nodes(a::Any) -> Any\n\n\nNumber of nodes (size of second dimension) of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.setdof!-Tuple{VoronoiFVM.SparseSolutionArray,Any,Integer}","page":"System","title":"VoronoiFVM.setdof!","text":"setdof!(a::VoronoiFVM.SparseSolutionArray, v::Any, i::Integer) -> Any\n\n\nSet value for degree of freedom.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{DenseSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.unknowns","text":"Create a solution vector for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.unknowns-Union{Tuple{SparseSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.unknowns","text":"Create a solution vector for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewK-Tuple{Int64,AbstractArray}","page":"System","title":"VoronoiFVM.viewK","text":"viewK(nspec::Int64, u::AbstractArray) -> SubArray\n\n\nSolution view on first edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewK-Union{Tuple{Tv}, Tuple{Edge{Tv},AbstractArray}} where Tv","page":"System","title":"VoronoiFVM.viewK","text":"Solution view on first edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewL-Tuple{Int64,AbstractArray}","page":"System","title":"VoronoiFVM.viewL","text":"viewL(nspec::Int64, u::AbstractArray) -> SubArray\n\n\nSolution view on second edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.viewL-Union{Tuple{Tv}, Tuple{Edge{Tv},AbstractArray}} where Tv","page":"System","title":"VoronoiFVM.viewL","text":"viewL(edge::Tv, u::Tv)\n\n\nSolution view on second edge node\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.embed!-Union{Tuple{Tv}, Tuple{AbstractArray{Tv,2},AbstractArray{Tv,2},AbstractSystem{Tv}}} where Tv","page":"System","title":"VoronoiFVM.embed!","text":"embed!(solution::Tv, xinival::Tv, this::Tv; control, pre, post)\n\n\nSolution method for instance of abstract system.\n\nPerform solution via parameter embedding, calling solve! for each value of the parameter p from interval (0,1). The user is responsible for the interpretation of the parameter. The optional pre() callback can be used to communicate its value to the system. The optionalpost() callback method can be used to perform various postprocessing steps.\n\nIf control.handle_error is true, solve!  throws an error, and  stepsize control.Δp is lowered, and solve! is called again with a smaller  parameter value. If control.Δp<control.Δp_min, embed! is aborted with error.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},Function,AbstractArray{Tv,2}}} where Tv","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this::Tv, F::Tv, U::Tv)\n\n\nIntegrate function F of  solution vector over domain.  The result contains the integral for each species separately.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.solve!-Union{Tuple{Tv}, Tuple{AbstractArray{Tv,2},AbstractArray{Tv,2},AbstractSystem{Tv}}} where Tv","page":"System","title":"VoronoiFVM.solve!","text":"Solution method for instance of abstract system.\n\nPerform solution of stationary system (if tstep==Inf) or one tine step of implicit Euler time step system using Newton's method with damping.  Initial damping is chosen according  control.damp_initial.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},Array{Tv,1},AbstractArray{Tv,2},AbstractArray{Tv,2},Real}} where Tv","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this, tf, U, Uold, tstep)\n\n\nCalculate test function integral.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.integrate-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},Array{Tv,1},AbstractArray{Tv,2}}} where Tv","page":"System","title":"VoronoiFVM.integrate","text":"integrate(this, tf, U)\n\n\nCalculate test function integral.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.testfunction-Union{Tuple{Tv}, Tuple{TestFunctionFactory{Tv},Any,Any}} where Tv","page":"System","title":"VoronoiFVM.testfunction","text":"testfunction(factory, bc0, bc1)\n\n\nCreate testfunction which has Dirichlet zero boundary conditions  for boundary regions in bc0 and Dirichlet one boundary conditions  for boundary regions in bc1.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.copy-Union{Tuple{SparseSolutionArray{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"Base.copy","text":"Create a copy of solution array\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.getindex-Tuple{VoronoiFVM.SparseSolutionArray,Integer,Integer}","page":"System","title":"Base.getindex","text":"getindex(a::VoronoiFVM.SparseSolutionArray, ispec::Integer, inode::Integer) -> Any\n\n\nAccessor for solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.getindex-Tuple{VoronoiFVM.SubgridArrayView,Integer,Integer}","page":"System","title":"Base.getindex","text":"getindex(aview::VoronoiFVM.SubgridArrayView, ispec::Integer, inode::Integer) -> Any\n\n\nAccessor method for subgrid array view.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.setindex!-Tuple{VoronoiFVM.SparseSolutionArray,Any,Integer,Integer}","page":"System","title":"Base.setindex!","text":"setindex!(a::VoronoiFVM.SparseSolutionArray, v::Any, ispec::Integer, inode::Integer) -> Union{Nothing, SparseSolutionArray}\n\n\nAccessor for solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.setindex!-Tuple{VoronoiFVM.SubgridArrayView,Any,Integer,Integer}","page":"System","title":"Base.setindex!","text":"setindex!(aview::VoronoiFVM.SubgridArrayView, v::Any, ispec::Integer, inode::Integer) -> VoronoiFVM.SubgridArrayView\n\n\nAccessor method for subgrid array view.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.size-Tuple{VoronoiFVM.SparseSolutionArray}","page":"System","title":"Base.size","text":"size(a::VoronoiFVM.SparseSolutionArray) -> Tuple{Int64,Int64}\n\n\nReturn size of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.size-Tuple{VoronoiFVM.SubgridArrayView}","page":"System","title":"Base.size","text":"size(a::VoronoiFVM.SubgridArrayView) -> Tuple{Any,Int64}\n\n\nReturn size of solution array view.\n\n\n\n\n\n","category":"method"},{"location":"system/#Base.view-Union{Tuple{Tv}, Tuple{AbstractArray{Tv,2},SubGrid}} where Tv","page":"System","title":"Base.view","text":"view(a::Tv, sg::Tv) -> SubArray\n\n\nCreate a view of the solution array on a subgrid.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.edgelength-Union{Tuple{Edge{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.edgelength","text":"Calculate the length of an edge. \n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.is_boundary_species-Tuple{VoronoiFVM.AbstractSystem,Integer}","page":"System","title":"VoronoiFVM.is_boundary_species","text":"is_boundary_species(this::VoronoiFVM.AbstractSystem, ispec::Integer) -> Bool\n\n\nCheck if species number corresponds to boundary species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.is_bulk_species-Tuple{VoronoiFVM.AbstractSystem,Integer}","page":"System","title":"VoronoiFVM.is_bulk_species","text":"is_bulk_species(this::VoronoiFVM.AbstractSystem, ispec::Integer) -> Bool\n\n\nCheck if species number corresponds bulk species.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.isdof-Tuple{VoronoiFVM.AbstractSystem,Any,Any}","page":"System","title":"VoronoiFVM.isdof","text":"isdof(this::VoronoiFVM.AbstractSystem, ispec::Any, inode::Any) -> Bool\n\n\nCheck if degree of freedom is defined.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_dof-Tuple{VoronoiFVM.DenseSystem}","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(this::VoronoiFVM.DenseSystem) -> Int64\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_dof-Tuple{VoronoiFVM.SparseSystem}","page":"System","title":"VoronoiFVM.num_dof","text":"num_dof(this::VoronoiFVM.SparseSystem) -> Int64\n\n\nNumber of degrees of freedom for system.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Tuple{Any}","page":"System","title":"VoronoiFVM.num_species","text":"num_species(a::Any) -> Any\n\n\nNumber of species (size of first dimension) of solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Union{Tuple{AbstractSystem{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.num_species","text":"Number of species in system\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.num_species-Union{Tuple{Edge{Tv}}, Tuple{Tv}} where Tv","page":"System","title":"VoronoiFVM.num_species","text":"Return number of species for edge\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.values-Tuple{Array}","page":"System","title":"VoronoiFVM.values","text":"values(a::Array) -> Any\n\n\nArray of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.values-Tuple{VoronoiFVM.SparseSolutionArray}","page":"System","title":"VoronoiFVM.values","text":"values(a::VoronoiFVM.SparseSolutionArray) -> Array{Tv,1} where Tv\n\n\nArray of values in solution array.\n\n\n\n\n\n","category":"method"},{"location":"system/#VoronoiFVM.eval_and_assemble-Union{Tuple{Tv}, Tuple{AbstractSystem{Tv},AbstractArray{Tv,2},AbstractArray{Tv,2},AbstractArray{Tv,2},Tv}} where Tv","page":"System","title":"VoronoiFVM.eval_and_assemble","text":"eval_and_assemble(system::Tv, U::Tv, UOld::Tv, F::Tv, tstep::Tv)\n\n\nWrapper for main assembly method.\n\nEvaluate solution with result in right hand side F and  assemble matrix into system.matrix.\n\n\n\n\n\n","category":"method"},{"location":"allindex/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"allindex/#Types-and-Constructors-1","page":"Index","title":"Types and Constructors","text":"","category":"section"},{"location":"allindex/#","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:type]","category":"page"},{"location":"allindex/#Constants-1","page":"Index","title":"Constants","text":"","category":"section"},{"location":"allindex/#","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:constant]","category":"page"},{"location":"allindex/#Methods-1","page":"Index","title":"Methods","text":"","category":"section"},{"location":"allindex/#","page":"Index","title":"Index","text":"Modules = [VoronoiFVM]\nOrder=[:function]","category":"page"},{"location":"examples/OneSpeciesNonlinearPoisson/#D-Nonlinear-Poisson-equation-with-one-species-1","page":"1D Nonlinear Poisson equation with one species","title":"1D Nonlinear Poisson equation with one species","text":"","category":"section"},{"location":"examples/OneSpeciesNonlinearPoisson/#","page":"1D Nonlinear Poisson equation with one species","title":"1D Nonlinear Poisson equation with one species","text":"Solve the nonlinear Poisson equation","category":"page"},{"location":"examples/OneSpeciesNonlinearPoisson/#","page":"1D Nonlinear Poisson equation with one species","title":"1D Nonlinear Poisson equation with one species","text":"-nabla varepsilon nabla u^2 + u^2 = 00001x","category":"page"},{"location":"examples/OneSpeciesNonlinearPoisson/#","page":"1D Nonlinear Poisson equation with one species","title":"1D Nonlinear Poisson equation with one species","text":"in $\\Omega=(0,1)$ with boundary condition $u(0)=1$ and $u(1)=0.5$.","category":"page"},{"location":"examples/OneSpeciesNonlinearPoisson/#","page":"1D Nonlinear Poisson equation with one species","title":"1D Nonlinear Poisson equation with one species","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/OneSpeciesNonlinearPoisson.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/TwoSpeciesNonlinearPoisson/#D-Nonlinear-Poisson-equation-with-two-species-1","page":"1D Nonlinear Poisson equation with two species","title":"1D Nonlinear Poisson equation with two species","text":"","category":"section"},{"location":"examples/TwoSpeciesNonlinearPoisson/#","page":"1D Nonlinear Poisson equation with two species","title":"1D Nonlinear Poisson equation with two species","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/TwoSpeciesNonlinearPoisson.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/IonicLiquid/#D-Ionic-Liquid-1","page":"1D Ionic Liquid","title":"1D Ionic Liquid","text":"","category":"section"},{"location":"examples/IonicLiquid/#","page":"1D Ionic Liquid","title":"1D Ionic Liquid","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/IonicLiquid.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/NonlinearPoisson2D/#D-Nonlinear-Poisson-equation-1","page":"2D Nonlinear Poisson equation","title":"2D Nonlinear Poisson equation","text":"","category":"section"},{"location":"examples/NonlinearPoisson2D/#","page":"2D Nonlinear Poisson equation","title":"2D Nonlinear Poisson equation","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/NonlinearPoisson2D.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/NonlinearPoisson2D_Reaction/#D-Nonlinear-Poisson-equation-with-reaction-1","page":"2D Nonlinear Poisson equation with reaction","title":"2D Nonlinear Poisson equation with reaction","text":"","category":"section"},{"location":"examples/NonlinearPoisson2D_Reaction/#","page":"2D Nonlinear Poisson equation with reaction","title":"2D Nonlinear Poisson equation with reaction","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/NonlinearPoisson2D_Reaction.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/ThreeRegions1D/#Differing-species-sets-in-regions,-1D-1","page":"Differing species sets in regions, 1D","title":"Differing species sets in regions, 1D","text":"","category":"section"},{"location":"examples/ThreeRegions1D/#","page":"Differing species sets in regions, 1D","title":"Differing species sets in regions, 1D","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/ThreeRegions1D.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/NonlinearPoisson2D_BoundaryReaction/#D-Nonlinear-Poisson-equation-with-boundary-reaction-1","page":"2D Nonlinear Poisson equation with boundary reaction","title":"2D Nonlinear Poisson equation with boundary reaction","text":"","category":"section"},{"location":"examples/NonlinearPoisson2D_BoundaryReaction/#","page":"2D Nonlinear Poisson equation with boundary reaction","title":"2D Nonlinear Poisson equation with boundary reaction","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/NonlinearPoisson2D_BoundaryReaction.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/NonlinearPoisson1D_BoundarySpecies/#D-two-species-system-with-boundary-reaction-and-boundary-species-1","page":"1D two species system with boundary reaction and boundary species","title":"1D two species system with boundary reaction and boundary species","text":"","category":"section"},{"location":"examples/NonlinearPoisson1D_BoundarySpecies/#","page":"1D two species system with boundary reaction and boundary species","title":"1D two species system with boundary reaction and boundary species","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/NonlinearPoisson1D_BoundarySpecies.jl\",String))\n```\n\"\"\")","category":"page"},{"location":"examples/NonlinearPoisson2D_BoundarySpecies/#D-Nonlinear-Poisson-equation-with-boundary-reaction-and-boundary-species-1","page":"2D Nonlinear Poisson equation with boundary reaction and boundary species","title":"2D Nonlinear Poisson equation with boundary reaction and boundary species","text":"","category":"section"},{"location":"examples/NonlinearPoisson2D_BoundarySpecies/#","page":"2D Nonlinear Poisson equation with boundary reaction and boundary species","title":"2D Nonlinear Poisson equation with boundary reaction and boundary species","text":"using Markdown\nMarkdown.parse(\"\"\"\n```julia\n$(read(\"../../../examples/NonlinearPoisson2D_BoundarySpecies.jl\",String))\n```\n\"\"\")","category":"page"}]
}
